import { CSSProperties, ReactNode } from 'react';
import { SelectUnits } from '../utility/calendar';
import { defaultHeaderFormats } from '../default-config';
import { IntervalRenderer, SidebarHeaderChildrenFnProps, TimelineTimeSteps } from '../types/main';
import { Dayjs, UnitType } from 'dayjs';
export interface DateHeaderProps<Data> {
    style?: CSSProperties | undefined;
    className?: string | undefined;
    unit?: keyof TimelineTimeSteps | 'primaryHeader' | undefined;
    timelineUnit: SelectUnits;
    labelFormat?: string | (([startTime, endTime]: [Dayjs, Dayjs], unit: UnitType | 'primaryHeader', labelWidth: number) => string) | undefined;
    intervalRenderer?: (props: IntervalRenderer<Data>) => ReactNode;
    headerData?: Data | undefined;
    children?: ((props: SidebarHeaderChildrenFnProps<Data>) => ReactNode) | undefined;
    height?: number | undefined;
}
export type DateHeaderWrapper<Data> = {
    unit?: keyof TimelineTimeSteps | 'primaryHeader';
    labelFormat?: typeof formatLabel;
    style?: CSSProperties;
    className?: string;
    intervalRenderer?: (props: IntervalRenderer<Data>) => ReactNode;
    headerData?: Data;
    height?: number;
};
export declare function DateHeader<Data>({ labelFormat, unit, style, className, intervalRenderer, headerData, height, }: DateHeaderWrapper<Data>): import("react/jsx-runtime").JSX.Element;
declare function formatLabel([timeStart]: [Dayjs, Dayjs], unit: keyof typeof defaultHeaderFormats, labelWidth: number, formatOptions?: Record<string, {
    long: string;
    mediumLong: string;
    medium: string;
    short: string;
}>): string;
export default DateHeader;
