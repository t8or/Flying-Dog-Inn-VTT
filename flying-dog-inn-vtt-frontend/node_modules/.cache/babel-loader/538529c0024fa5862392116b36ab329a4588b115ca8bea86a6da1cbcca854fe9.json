{"ast":null,"code":"var _jsxFileName = \"/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/Maps.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Maps.css';\nimport { useCampaign } from '../contexts/CampaignContext';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { DotsThreeVertical } from \"@phosphor-icons/react\";\n\n// Marker configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MARKER_COLORS = {\n  '#FF0000': 'Red',\n  '#00FF00': 'Green',\n  '#0000FF': 'Blue',\n  '#FFFF00': 'Yellow',\n  '#FF00FF': 'Magenta',\n  '#00FFFF': 'Cyan',\n  '#000000': 'Black'\n};\nconst Maps = ({\n  onMapChange\n}) => {\n  _s();\n  const {\n    id: mapId\n  } = useParams();\n  const navigate = useNavigate();\n  const [mapData, setMapData] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    selectedCampaign\n  } = useCampaign();\n  const mapContainerRef = React.useRef(null);\n  const leafletMapRef = React.useRef(null);\n\n  // Cleanup function\n  const cleanupMap = () => {\n    if (leafletMapRef.current) {\n      leafletMapRef.current.remove();\n      leafletMapRef.current = null;\n    }\n  };\n\n  // Reset state when map changes\n  useEffect(() => {\n    setIsLoading(true);\n    setMapData(null);\n    setImageDimensions(null);\n    setMarkers([]);\n    cleanupMap();\n    return cleanupMap;\n  }, [mapId]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanupMap;\n  }, []);\n\n  // Fetch map data and markers\n  useEffect(() => {\n    if (selectedCampaign && mapId) {\n      fetchMap();\n      fetchMarkers();\n    }\n  }, [mapId, selectedCampaign]);\n  const fetchMap = async () => {\n    if (!selectedCampaign) return;\n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch map');\n      const data = await response.json();\n      setMapData(data);\n\n      // Load image dimensions\n      const img = new Image();\n      img.onload = () => {\n        console.log('Image loaded:', img.width, img.height);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n        setIsLoading(false);\n      };\n      img.onerror = error => {\n        console.error('Failed to load map image:', error);\n        setIsLoading(false);\n      };\n      img.src = `http://localhost:3001/maps/${data.path}`;\n      if (onMapChange) onMapChange(data);\n    } catch (error) {\n      console.error('Error fetching map:', error);\n      setIsLoading(false);\n      navigate('/maps');\n    }\n  };\n  const fetchMarkers = async () => {\n    if (!selectedCampaign || !mapId) return;\n    try {\n      console.log('Fetching markers for campaign:', selectedCampaign.id, 'map:', mapId);\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers?campaign_id=${selectedCampaign.id}`);\n      const responseText = await response.text();\n      console.log('Fetch markers response:', responseText);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch markers: ${responseText}`);\n      }\n      const data = JSON.parse(responseText);\n      console.log('Parsed markers:', data);\n\n      // Convert lat/lng to numbers\n      const parsedMarkers = data.map(marker => ({\n        ...marker,\n        lat: Number(marker.lat),\n        lng: Number(marker.lng),\n        campaign_id: selectedCampaign.id // Ensure campaign_id is set\n      }));\n      console.log('Processed markers:', parsedMarkers);\n      setMarkers(parsedMarkers);\n\n      // If map is already initialized, add markers\n      if (leafletMapRef.current) {\n        addMarkersToMap(parsedMarkers, leafletMapRef.current);\n      }\n    } catch (error) {\n      console.error('Error fetching markers:', error);\n    }\n  };\n  const createMarkerIcon = (color = '#FF0000') => {\n    return L.divIcon({\n      className: 'custom-marker',\n      html: `<div class=\"marker-icon\" style=\"color: ${color}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"48\" viewBox=\"0 0 256 256\">\n          <path fill=\"currentColor\" d=\"M128,16a88.1,88.1,0,0,0-88,88c0,75.3,80,132.17,83.41,134.55a8,8,0,0,0,9.18,0C136,236.17,216,179.3,216,104A88.1,88.1,0,0,0,128,16Z\" stroke=\"rgba(0, 0, 0, 0.25)\" stroke-width=\"16\"/>\n        </svg>\n      </div>`,\n      iconSize: [32, 48],\n      iconAnchor: [16, 48],\n      popupAnchor: [0, -24]\n    });\n  };\n  const createPopupContent = (markerData, isNewMarker = false, handlers) => {\n    const uniqueId = Math.random().toString(36).substring(7);\n    const formId = `marker-form-${uniqueId}`;\n    const deleteId = `delete-btn-${uniqueId}`;\n    const submitId = `submit-btn-${uniqueId}`;\n\n    // Create popup content with unique IDs\n    const content = `\n      <div class=\"marker-content\">\n        <form id=\"${formId}\" class=\"marker-form\">\n          <input \n            type=\"text\" \n            name=\"label\" \n            value=\"${markerData.label || ''}\" \n            placeholder=\"Marker Label\" \n            class=\"marker-input\" \n            required\n          />\n          <textarea \n            name=\"description\" \n            placeholder=\"Description (optional)\" \n            class=\"marker-input\" \n            rows=\"2\"\n          >${markerData.description || ''}</textarea>\n          <select name=\"color\" class=\"marker-input\">\n            ${Object.entries(MARKER_COLORS).map(([value, label]) => `\n              <option value=\"${value}\" ${value === (markerData.color || '#FF0000') ? 'selected' : ''}>\n                ${label}\n              </option>\n            `).join('')}\n          </select>\n          <div class=\"marker-actions\">\n            <button type=\"button\" id=\"${deleteId}\" class=\"delete-button\">\n              ${isNewMarker ? 'Cancel' : 'Delete'}\n            </button>\n            <button type=\"button\" id=\"${submitId}\" class=\"dnd-button\">\n              ${isNewMarker ? 'Add Marker' : 'Save Changes'}\n            </button>\n          </div>\n        </form>\n      </div>\n    `;\n\n    // Return both content and IDs for event binding\n    return {\n      content,\n      formId,\n      deleteId,\n      submitId\n    };\n  };\n  const bindMarkerEvents = (marker, markerData, map, popup) => {\n    console.log('Binding events for marker:', markerData);\n\n    // Create fresh popup content with new IDs\n    const {\n      content,\n      formId,\n      deleteId,\n      submitId\n    } = createPopupContent(markerData, false);\n\n    // Update popup content if provided, otherwise create new popup\n    if (popup) {\n      popup.setContent(content);\n    } else {\n      popup = L.popup({\n        className: 'custom-popup',\n        closeButton: true,\n        autoClose: false,\n        closeOnClick: false\n      }).setContent(content);\n      marker.bindPopup(popup);\n    }\n\n    // Add click handler\n    marker.on('click', e => {\n      // Stop the event from bubbling up to the map\n      L.DomEvent.stopPropagation(e);\n\n      // Close other popups first\n      map.eachLayer(layer => {\n        if (layer instanceof L.Marker && layer !== marker) {\n          layer.closePopup();\n        }\n      });\n\n      // Open this marker's popup\n      marker.openPopup();\n\n      // Wait for the popup to be added to the DOM\n      setTimeout(() => {\n        const form = document.getElementById(formId);\n        const deleteBtn = document.getElementById(deleteId);\n        const submitBtn = document.getElementById(submitId);\n        console.log('Form elements:', {\n          formId,\n          deleteId,\n          submitId,\n          form,\n          deleteBtn,\n          submitBtn\n        });\n        if (deleteBtn) {\n          deleteBtn.onclick = async () => {\n            try {\n              if (!selectedCampaign) {\n                throw new Error('No campaign selected');\n              }\n              deleteBtn.disabled = true;\n              console.log('Deleting marker:', markerData.id, 'for campaign:', selectedCampaign.id);\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}?campaign_id=${selectedCampaign.id}`, {\n                method: 'DELETE'\n              });\n              if (!response.ok) {\n                throw new Error('Failed to delete marker');\n              }\n              setMarkers(prev => prev.filter(m => m.id !== markerData.id));\n              map.removeLayer(marker);\n            } catch (error) {\n              console.error('Error deleting marker:', error);\n              deleteBtn.disabled = false;\n              alert('Failed to delete marker: ' + error.message);\n            }\n          };\n        }\n        if (submitBtn && form) {\n          submitBtn.onclick = async () => {\n            try {\n              if (!selectedCampaign) {\n                throw new Error('No campaign selected');\n              }\n              submitBtn.disabled = true;\n              const formData = new FormData(form);\n              const updatedMarker = {\n                id: markerData.id,\n                map_id: Number(mapId),\n                campaign_id: selectedCampaign.id,\n                lat: Number(markerData.lat),\n                lng: Number(markerData.lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000'\n              };\n              console.log('Updating marker:', updatedMarker);\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}`, {\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(updatedMarker)\n              });\n              if (!response.ok) {\n                throw new Error('Failed to update marker');\n              }\n              const savedMarker = await response.json();\n              const parsedMarker = {\n                ...savedMarker,\n                id: savedMarker.id,\n                lat: Number(savedMarker.lat),\n                lng: Number(savedMarker.lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000',\n                campaign_id: selectedCampaign.id,\n                map_id: Number(mapId)\n              };\n\n              // Update state\n              setMarkers(prev => prev.map(m => m.id === parsedMarker.id ? parsedMarker : m));\n\n              // Update marker appearance\n              marker.setIcon(createMarkerIcon(parsedMarker.color));\n\n              // Close the popup\n              marker.closePopup();\n\n              // Remove old event listeners\n              marker.off('click popupopen popupclose');\n\n              // Rebind events with updated data\n              bindMarkerEvents(marker, parsedMarker, map);\n            } catch (error) {\n              console.error('Error updating marker:', error);\n              submitBtn.disabled = false;\n              alert('Failed to update marker: ' + error.message);\n            }\n          };\n        }\n      }, 0);\n    });\n\n    // Clean up event listeners when popup closes\n    marker.on('popupclose', () => {\n      const form = document.getElementById(formId);\n      const deleteBtn = document.getElementById(deleteId);\n      const submitBtn = document.getElementById(submitId);\n      if (deleteBtn) deleteBtn.onclick = null;\n      if (submitBtn) submitBtn.onclick = null;\n      if (form) form.onsubmit = null;\n    });\n    return popup;\n  };\n  const addMarkersToMap = (markersData, targetMap) => {\n    if (!targetMap || !targetMap.getContainer()) {\n      console.warn('Map not ready for markers');\n      return;\n    }\n\n    // Only clear temporary markers\n    targetMap.eachLayer(layer => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        targetMap.removeLayer(layer);\n      }\n    });\n\n    // Add new markers\n    markersData.forEach(markerData => {\n      if (!markerData || typeof markerData.lat !== 'number' || typeof markerData.lng !== 'number') {\n        console.warn('Invalid marker data:', markerData);\n        return;\n      }\n      try {\n        // Create new marker\n        const marker = L.marker([markerData.lat, markerData.lng], {\n          icon: createMarkerIcon(markerData.color || '#FF0000'),\n          permanent: true\n        });\n\n        // Bind all events\n        bindMarkerEvents(marker, markerData, targetMap);\n\n        // Add to map\n        marker.addTo(targetMap);\n      } catch (error) {\n        console.error('Error adding marker:', markerData, error);\n      }\n    });\n  };\n\n  // Initialize map when data is ready\n  useEffect(() => {\n    if (!mapData || !imageDimensions || !mapContainerRef.current) return;\n    try {\n      console.log('Initializing map with dimensions:', imageDimensions);\n\n      // Clean up any existing map first\n      cleanupMap();\n      const bounds = [[0, 0], [imageDimensions.height, imageDimensions.width]];\n      const map = L.map(mapContainerRef.current, {\n        crs: L.CRS.Simple,\n        maxZoom: 2,\n        minZoom: -2,\n        maxBounds: bounds,\n        zoomControl: true\n      });\n\n      // Store the map instance in the ref\n      leafletMapRef.current = map;\n\n      // Add the image overlay immediately\n      const imageOverlay = L.imageOverlay(`http://localhost:3001/maps/${mapData.path}`, bounds).addTo(map);\n      map.fitBounds(bounds);\n\n      // Add click handler for new markers\n      map.on('click', e => {\n        // Only handle map clicks if we're not clicking a marker or popup\n        const isMarkerClick = e.originalEvent.target.closest('.leaflet-marker-icon');\n        const isPopupClick = e.originalEvent.target.closest('.leaflet-popup');\n        const isMapClick = e.originalEvent.target === map.getContainer() || e.originalEvent.target.classList.contains('leaflet-tile');\n\n        // If clicking on a marker or popup, let the marker's own click handler handle it\n        if (isMarkerClick || isPopupClick) {\n          return;\n        }\n\n        // If clicking on the map, close popups and potentially create a new marker\n        map.eachLayer(layer => {\n          if (layer instanceof L.Marker) {\n            layer.closePopup();\n          }\n        });\n        if (isMapClick) {\n          handleMapClick(e, map);\n        }\n      });\n\n      // Handle ESC key to close popups\n      const handleEscKey = e => {\n        if (e.key === 'Escape' && leafletMapRef.current) {\n          leafletMapRef.current.eachLayer(layer => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      };\n\n      // Add ESC key listener\n      document.addEventListener('keydown', handleEscKey);\n\n      // Add existing markers if any\n      if (markers.length > 0) {\n        console.log('Adding existing markers:', markers.length);\n        addMarkersToMap(markers, map);\n      }\n      setIsLoading(false);\n\n      // Cleanup function\n      return () => {\n        document.removeEventListener('keydown', handleEscKey);\n        cleanupMap();\n      };\n    } catch (error) {\n      console.error('Error initializing map:', error);\n      setIsLoading(false);\n    }\n  }, [mapData, imageDimensions]); // Remove markers dependency\n\n  // Add separate effect for marker updates\n  useEffect(() => {\n    if (leafletMapRef.current && markers.length > 0) {\n      console.log('Updating markers on map');\n      addMarkersToMap(markers, leafletMapRef.current);\n    }\n  }, [markers]);\n\n  // Modify handleMapClick to close any open popups before creating a new one\n  const handleMapClick = (e, map) => {\n    if (!selectedCampaign || !mapId || !map) {\n      console.error('No campaign selected or invalid map');\n      alert('Please select a campaign first');\n      return;\n    }\n    const {\n      lat,\n      lng\n    } = e.latlng;\n\n    // Remove any existing temporary markers\n    map.eachLayer(layer => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        map.removeLayer(layer);\n      }\n    });\n    const tempMarker = L.marker([lat, lng], {\n      icon: createMarkerIcon('#FF0000'),\n      permanent: false\n    });\n    const tempMarkerData = {\n      map_id: Number(mapId),\n      lat: Number(lat),\n      lng: Number(lng),\n      label: '',\n      description: '',\n      color: '#FF0000',\n      campaign_id: selectedCampaign.id\n    };\n\n    // Create popup with unique IDs\n    const {\n      content,\n      formId,\n      deleteId,\n      submitId\n    } = createPopupContent(tempMarkerData, true);\n    const popup = L.popup({\n      className: 'custom-popup',\n      closeButton: true,\n      autoClose: false,\n      closeOnClick: false\n    }).setContent(content);\n    tempMarker.bindPopup(popup);\n\n    // Add click handler for the temporary marker\n    tempMarker.on('click', e => {\n      // Stop the event from bubbling up to the map\n      L.DomEvent.stopPropagation(e);\n\n      // Close other popups first\n      map.eachLayer(layer => {\n        if (layer instanceof L.Marker && layer !== tempMarker) {\n          layer.closePopup();\n        }\n      });\n\n      // Open this marker's popup\n      tempMarker.openPopup();\n\n      // Wait for the popup to be added to the DOM\n      setTimeout(() => {\n        const form = document.getElementById(formId);\n        const cancelBtn = document.getElementById(deleteId);\n        const createBtn = document.getElementById(submitId);\n        console.log('Temp marker form elements:', {\n          formId,\n          deleteId,\n          submitId,\n          form,\n          cancelBtn,\n          createBtn\n        });\n        if (cancelBtn) {\n          cancelBtn.onclick = () => {\n            map.removeLayer(tempMarker);\n          };\n        }\n        if (createBtn && form) {\n          createBtn.onclick = async () => {\n            try {\n              if (!selectedCampaign) {\n                throw new Error('No campaign selected');\n              }\n              createBtn.disabled = true;\n              const formData = new FormData(form);\n              const newMarker = {\n                map_id: Number(mapId),\n                campaign_id: selectedCampaign.id,\n                lat: Number(lat),\n                lng: Number(lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000',\n                shape: 'default'\n              };\n              console.log('Creating marker:', newMarker);\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers`, {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(newMarker)\n              });\n              const responseText = await response.text();\n              console.log('Create marker response:', responseText);\n              if (!response.ok) {\n                throw new Error(`Failed to create marker: ${responseText}`);\n              }\n              const savedMarker = JSON.parse(responseText);\n              console.log('Saved marker:', savedMarker);\n              const parsedMarker = {\n                ...savedMarker,\n                id: savedMarker.id,\n                lat: Number(savedMarker.lat),\n                lng: Number(savedMarker.lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000',\n                campaign_id: selectedCampaign.id,\n                map_id: Number(mapId)\n              };\n              console.log('Parsed marker:', parsedMarker);\n\n              // Remove the temporary marker\n              map.removeLayer(tempMarker);\n\n              // Add the new marker\n              const marker = L.marker([parsedMarker.lat, parsedMarker.lng], {\n                icon: createMarkerIcon(parsedMarker.color),\n                permanent: true\n              });\n\n              // Update state before adding to map\n              setMarkers(prev => [...prev, parsedMarker]);\n\n              // Bind events and add to map\n              bindMarkerEvents(marker, parsedMarker, map);\n              marker.addTo(map);\n            } catch (error) {\n              console.error('Error creating marker:', error);\n              createBtn.disabled = false;\n              alert('Failed to create marker: ' + error.message);\n            }\n          };\n        }\n      }, 0);\n    });\n\n    // Add event listener for popup close\n    tempMarker.on('popupclose', () => {\n      // Clean up the temporary marker if it's still on the map\n      if (map.hasLayer(tempMarker)) {\n        map.removeLayer(tempMarker);\n      }\n    });\n    tempMarker.addTo(map).openPopup();\n  };\n  const handleMarkerCreate = () => {};\n  const handleMarkerUpdate = () => {};\n  const handleMarkerDelete = () => {};\n  const handleMarkerEdit = () => {};\n  if (isLoading || !mapData || !imageDimensions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100%'\n        },\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          margin: 0,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: mapData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"more\",\n        \"aria-controls\": \"map-menu\",\n        \"aria-haspopup\": \"true\",\n        onClick: e => setMenuAnchorEl(e.currentTarget),\n        style: {\n          marginLeft: '8px',\n          color: '#111827'\n        },\n        children: /*#__PURE__*/_jsxDEV(DotsThreeVertical, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"map-menu\",\n      anchorEl: menuAnchorEl,\n      keepMounted: true,\n      open: Boolean(menuAnchorEl),\n      onClose: () => setMenuAnchorEl(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setMenuAnchorEl(null),\n        children: \"Rename\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setMenuAnchorEl(null),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      style: {\n        height: 'calc(100vh - 80px)',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 656,\n    columnNumber: 5\n  }, this);\n};\n_s(Maps, \"8Rjkta4JrCCodGHDyHv+LrxJeAE=\", false, function () {\n  return [useParams, useNavigate, useCampaign];\n});\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","L","useCampaign","IconButton","Menu","MenuItem","DotsThreeVertical","jsxDEV","_jsxDEV","MARKER_COLORS","Maps","onMapChange","_s","id","mapId","navigate","mapData","setMapData","markers","setMarkers","menuAnchorEl","setMenuAnchorEl","imageDimensions","setImageDimensions","isLoading","setIsLoading","selectedCampaign","mapContainerRef","useRef","leafletMapRef","cleanupMap","current","remove","fetchMap","fetchMarkers","response","fetch","ok","Error","data","json","img","Image","onload","console","log","width","height","onerror","error","src","path","responseText","text","JSON","parse","parsedMarkers","map","marker","lat","Number","lng","campaign_id","addMarkersToMap","createMarkerIcon","color","divIcon","className","html","iconSize","iconAnchor","popupAnchor","createPopupContent","markerData","isNewMarker","handlers","uniqueId","Math","random","toString","substring","formId","deleteId","submitId","content","label","description","Object","entries","value","join","bindMarkerEvents","popup","setContent","closeButton","autoClose","closeOnClick","bindPopup","on","e","DomEvent","stopPropagation","eachLayer","layer","Marker","closePopup","openPopup","setTimeout","form","document","getElementById","deleteBtn","submitBtn","onclick","disabled","method","prev","filter","m","removeLayer","alert","message","formData","FormData","updatedMarker","map_id","get","headers","body","stringify","savedMarker","parsedMarker","setIcon","off","onsubmit","markersData","targetMap","getContainer","warn","options","permanent","forEach","icon","addTo","bounds","crs","CRS","Simple","maxZoom","minZoom","maxBounds","zoomControl","imageOverlay","fitBounds","isMarkerClick","originalEvent","target","closest","isPopupClick","isMapClick","classList","contains","handleMapClick","handleEscKey","key","addEventListener","length","removeEventListener","latlng","tempMarker","tempMarkerData","cancelBtn","createBtn","newMarker","shape","hasLayer","handleMarkerCreate","handleMarkerUpdate","handleMarkerDelete","handleMarkerEdit","children","style","display","alignItems","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","padding","margin","name","onClick","currentTarget","marginLeft","size","anchorEl","keepMounted","open","Boolean","onClose","ref","_c","$RefreshReg$"],"sources":["/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/Maps.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Maps.css';\nimport { useCampaign } from '../contexts/CampaignContext';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { DotsThreeVertical } from \"@phosphor-icons/react\";\n\n// Marker configuration\nconst MARKER_COLORS = {\n  '#FF0000': 'Red',\n  '#00FF00': 'Green',\n  '#0000FF': 'Blue',\n  '#FFFF00': 'Yellow',\n  '#FF00FF': 'Magenta',\n  '#00FFFF': 'Cyan',\n  '#000000': 'Black'\n};\n\nconst Maps = ({ onMapChange }) => {\n  const { id: mapId } = useParams();\n  const navigate = useNavigate();\n  const [mapData, setMapData] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { selectedCampaign } = useCampaign();\n  const mapContainerRef = React.useRef(null);\n  const leafletMapRef = React.useRef(null);\n\n  // Cleanup function\n  const cleanupMap = () => {\n    if (leafletMapRef.current) {\n      leafletMapRef.current.remove();\n      leafletMapRef.current = null;\n    }\n  };\n\n  // Reset state when map changes\n  useEffect(() => {\n    setIsLoading(true);\n    setMapData(null);\n    setImageDimensions(null);\n    setMarkers([]);\n    cleanupMap();\n    return cleanupMap;\n  }, [mapId]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanupMap;\n  }, []);\n\n  // Fetch map data and markers\n  useEffect(() => {\n    if (selectedCampaign && mapId) {\n      fetchMap();\n      fetchMarkers();\n    }\n  }, [mapId, selectedCampaign]);\n\n  const fetchMap = async () => {\n    if (!selectedCampaign) return;\n    \n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch map');\n      const data = await response.json();\n      setMapData(data);\n      \n      // Load image dimensions\n      const img = new Image();\n      img.onload = () => {\n        console.log('Image loaded:', img.width, img.height);\n        setImageDimensions({ width: img.width, height: img.height });\n        setIsLoading(false);\n      };\n      img.onerror = (error) => {\n        console.error('Failed to load map image:', error);\n        setIsLoading(false);\n      };\n      img.src = `http://localhost:3001/maps/${data.path}`;\n      \n      if (onMapChange) onMapChange(data);\n    } catch (error) {\n      console.error('Error fetching map:', error);\n      setIsLoading(false);\n      navigate('/maps');\n    }\n  };\n\n  const fetchMarkers = async () => {\n    if (!selectedCampaign || !mapId) return;\n    \n    try {\n      console.log('Fetching markers for campaign:', selectedCampaign.id, 'map:', mapId);\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers?campaign_id=${selectedCampaign.id}`);\n      \n      const responseText = await response.text();\n      console.log('Fetch markers response:', responseText);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch markers: ${responseText}`);\n      }\n      \n      const data = JSON.parse(responseText);\n      console.log('Parsed markers:', data);\n      \n      // Convert lat/lng to numbers\n      const parsedMarkers = data.map(marker => ({\n        ...marker,\n        lat: Number(marker.lat),\n        lng: Number(marker.lng),\n        campaign_id: selectedCampaign.id // Ensure campaign_id is set\n      }));\n      \n      console.log('Processed markers:', parsedMarkers);\n      setMarkers(parsedMarkers);\n      \n      // If map is already initialized, add markers\n      if (leafletMapRef.current) {\n        addMarkersToMap(parsedMarkers, leafletMapRef.current);\n      }\n    } catch (error) {\n      console.error('Error fetching markers:', error);\n    }\n  };\n\n  const createMarkerIcon = (color = '#FF0000') => {\n    return L.divIcon({\n      className: 'custom-marker',\n      html: `<div class=\"marker-icon\" style=\"color: ${color}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"48\" viewBox=\"0 0 256 256\">\n          <path fill=\"currentColor\" d=\"M128,16a88.1,88.1,0,0,0-88,88c0,75.3,80,132.17,83.41,134.55a8,8,0,0,0,9.18,0C136,236.17,216,179.3,216,104A88.1,88.1,0,0,0,128,16Z\" stroke=\"rgba(0, 0, 0, 0.25)\" stroke-width=\"16\"/>\n        </svg>\n      </div>`,\n      iconSize: [32, 48],\n      iconAnchor: [16, 48],\n      popupAnchor: [0, -24]\n    });\n  };\n\n  const createPopupContent = (markerData, isNewMarker = false, handlers) => {\n    const uniqueId = Math.random().toString(36).substring(7);\n    const formId = `marker-form-${uniqueId}`;\n    const deleteId = `delete-btn-${uniqueId}`;\n    const submitId = `submit-btn-${uniqueId}`;\n\n    // Create popup content with unique IDs\n    const content = `\n      <div class=\"marker-content\">\n        <form id=\"${formId}\" class=\"marker-form\">\n          <input \n            type=\"text\" \n            name=\"label\" \n            value=\"${markerData.label || ''}\" \n            placeholder=\"Marker Label\" \n            class=\"marker-input\" \n            required\n          />\n          <textarea \n            name=\"description\" \n            placeholder=\"Description (optional)\" \n            class=\"marker-input\" \n            rows=\"2\"\n          >${markerData.description || ''}</textarea>\n          <select name=\"color\" class=\"marker-input\">\n            ${Object.entries(MARKER_COLORS).map(([value, label]) => `\n              <option value=\"${value}\" ${value === (markerData.color || '#FF0000') ? 'selected' : ''}>\n                ${label}\n              </option>\n            `).join('')}\n          </select>\n          <div class=\"marker-actions\">\n            <button type=\"button\" id=\"${deleteId}\" class=\"delete-button\">\n              ${isNewMarker ? 'Cancel' : 'Delete'}\n            </button>\n            <button type=\"button\" id=\"${submitId}\" class=\"dnd-button\">\n              ${isNewMarker ? 'Add Marker' : 'Save Changes'}\n            </button>\n          </div>\n        </form>\n      </div>\n    `;\n\n    // Return both content and IDs for event binding\n    return { content, formId, deleteId, submitId };\n  };\n\n  const bindMarkerEvents = (marker, markerData, map, popup) => {\n    console.log('Binding events for marker:', markerData);\n    \n    // Create fresh popup content with new IDs\n    const { content, formId, deleteId, submitId } = createPopupContent(markerData, false);\n    \n    // Update popup content if provided, otherwise create new popup\n    if (popup) {\n      popup.setContent(content);\n    } else {\n      popup = L.popup({\n        className: 'custom-popup',\n        closeButton: true,\n        autoClose: false,\n        closeOnClick: false\n      }).setContent(content);\n      marker.bindPopup(popup);\n    }\n\n    // Add click handler\n    marker.on('click', (e) => {\n      // Stop the event from bubbling up to the map\n      L.DomEvent.stopPropagation(e);\n      \n      // Close other popups first\n      map.eachLayer((layer) => {\n        if (layer instanceof L.Marker && layer !== marker) {\n          layer.closePopup();\n        }\n      });\n      \n      // Open this marker's popup\n      marker.openPopup();\n\n      // Wait for the popup to be added to the DOM\n      setTimeout(() => {\n        const form = document.getElementById(formId);\n        const deleteBtn = document.getElementById(deleteId);\n        const submitBtn = document.getElementById(submitId);\n\n        console.log('Form elements:', { formId, deleteId, submitId, form, deleteBtn, submitBtn });\n\n        if (deleteBtn) {\n          deleteBtn.onclick = async () => {\n            try {\n              if (!selectedCampaign) {\n                throw new Error('No campaign selected');\n              }\n\n              deleteBtn.disabled = true;\n              \n              console.log('Deleting marker:', markerData.id, 'for campaign:', selectedCampaign.id);\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}?campaign_id=${selectedCampaign.id}`, {\n                method: 'DELETE'\n              });\n              \n              if (!response.ok) {\n                throw new Error('Failed to delete marker');\n              }\n              \n              setMarkers(prev => prev.filter(m => m.id !== markerData.id));\n              map.removeLayer(marker);\n            } catch (error) {\n              console.error('Error deleting marker:', error);\n              deleteBtn.disabled = false;\n              alert('Failed to delete marker: ' + error.message);\n            }\n          };\n        }\n\n        if (submitBtn && form) {\n          submitBtn.onclick = async () => {\n            try {\n              if (!selectedCampaign) {\n                throw new Error('No campaign selected');\n              }\n\n              submitBtn.disabled = true;\n              \n              const formData = new FormData(form);\n              const updatedMarker = {\n                id: markerData.id,\n                map_id: Number(mapId),\n                campaign_id: selectedCampaign.id,\n                lat: Number(markerData.lat),\n                lng: Number(markerData.lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000'\n              };\n\n              console.log('Updating marker:', updatedMarker);\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(updatedMarker)\n              });\n\n              if (!response.ok) {\n                throw new Error('Failed to update marker');\n              }\n              \n              const savedMarker = await response.json();\n              \n              const parsedMarker = {\n                ...savedMarker,\n                id: savedMarker.id,\n                lat: Number(savedMarker.lat),\n                lng: Number(savedMarker.lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000',\n                campaign_id: selectedCampaign.id,\n                map_id: Number(mapId)\n              };\n              \n              // Update state\n              setMarkers(prev => prev.map(m => m.id === parsedMarker.id ? parsedMarker : m));\n              \n              // Update marker appearance\n              marker.setIcon(createMarkerIcon(parsedMarker.color));\n              \n              // Close the popup\n              marker.closePopup();\n\n              // Remove old event listeners\n              marker.off('click popupopen popupclose');\n\n              // Rebind events with updated data\n              bindMarkerEvents(marker, parsedMarker, map);\n\n            } catch (error) {\n              console.error('Error updating marker:', error);\n              submitBtn.disabled = false;\n              alert('Failed to update marker: ' + error.message);\n            }\n          };\n        }\n      }, 0);\n    });\n\n    // Clean up event listeners when popup closes\n    marker.on('popupclose', () => {\n      const form = document.getElementById(formId);\n      const deleteBtn = document.getElementById(deleteId);\n      const submitBtn = document.getElementById(submitId);\n\n      if (deleteBtn) deleteBtn.onclick = null;\n      if (submitBtn) submitBtn.onclick = null;\n      if (form) form.onsubmit = null;\n    });\n\n    return popup;\n  };\n\n  const addMarkersToMap = (markersData, targetMap) => {\n    if (!targetMap || !targetMap.getContainer()) {\n      console.warn('Map not ready for markers');\n      return;\n    }\n\n    // Only clear temporary markers\n    targetMap.eachLayer((layer) => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        targetMap.removeLayer(layer);\n      }\n    });\n\n    // Add new markers\n    markersData.forEach(markerData => {\n      if (!markerData || typeof markerData.lat !== 'number' || typeof markerData.lng !== 'number') {\n        console.warn('Invalid marker data:', markerData);\n        return;\n      }\n\n      try {\n        // Create new marker\n        const marker = L.marker([markerData.lat, markerData.lng], {\n          icon: createMarkerIcon(markerData.color || '#FF0000'),\n          permanent: true\n        });\n\n        // Bind all events\n        bindMarkerEvents(marker, markerData, targetMap);\n\n        // Add to map\n        marker.addTo(targetMap);\n      } catch (error) {\n        console.error('Error adding marker:', markerData, error);\n      }\n    });\n  };\n\n  // Initialize map when data is ready\n  useEffect(() => {\n    if (!mapData || !imageDimensions || !mapContainerRef.current) return;\n\n    try {\n      console.log('Initializing map with dimensions:', imageDimensions);\n      \n      // Clean up any existing map first\n      cleanupMap();\n\n      const bounds = [[0, 0], [imageDimensions.height, imageDimensions.width]];\n      const map = L.map(mapContainerRef.current, {\n        crs: L.CRS.Simple,\n        maxZoom: 2,\n        minZoom: -2,\n        maxBounds: bounds,\n        zoomControl: true\n      });\n\n      // Store the map instance in the ref\n      leafletMapRef.current = map;\n\n      // Add the image overlay immediately\n      const imageOverlay = L.imageOverlay(`http://localhost:3001/maps/${mapData.path}`, bounds).addTo(map);\n      map.fitBounds(bounds);\n\n      // Add click handler for new markers\n      map.on('click', (e) => {\n        // Only handle map clicks if we're not clicking a marker or popup\n        const isMarkerClick = e.originalEvent.target.closest('.leaflet-marker-icon');\n        const isPopupClick = e.originalEvent.target.closest('.leaflet-popup');\n        const isMapClick = e.originalEvent.target === map.getContainer() || \n                          e.originalEvent.target.classList.contains('leaflet-tile');\n\n        // If clicking on a marker or popup, let the marker's own click handler handle it\n        if (isMarkerClick || isPopupClick) {\n          return;\n        }\n\n        // If clicking on the map, close popups and potentially create a new marker\n        map.eachLayer((layer) => {\n          if (layer instanceof L.Marker) {\n            layer.closePopup();\n          }\n        });\n\n        if (isMapClick) {\n          handleMapClick(e, map);\n        }\n      });\n\n      // Handle ESC key to close popups\n      const handleEscKey = (e) => {\n        if (e.key === 'Escape' && leafletMapRef.current) {\n          leafletMapRef.current.eachLayer((layer) => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      };\n\n      // Add ESC key listener\n      document.addEventListener('keydown', handleEscKey);\n\n      // Add existing markers if any\n      if (markers.length > 0) {\n        console.log('Adding existing markers:', markers.length);\n        addMarkersToMap(markers, map);\n      }\n\n      setIsLoading(false);\n\n      // Cleanup function\n      return () => {\n        document.removeEventListener('keydown', handleEscKey);\n        cleanupMap();\n      };\n\n    } catch (error) {\n      console.error('Error initializing map:', error);\n      setIsLoading(false);\n    }\n  }, [mapData, imageDimensions]); // Remove markers dependency\n\n  // Add separate effect for marker updates\n  useEffect(() => {\n    if (leafletMapRef.current && markers.length > 0) {\n      console.log('Updating markers on map');\n      addMarkersToMap(markers, leafletMapRef.current);\n    }\n  }, [markers]);\n\n  // Modify handleMapClick to close any open popups before creating a new one\n  const handleMapClick = (e, map) => {\n    if (!selectedCampaign || !mapId || !map) {\n      console.error('No campaign selected or invalid map');\n      alert('Please select a campaign first');\n      return;\n    }\n\n    const { lat, lng } = e.latlng;\n    \n    // Remove any existing temporary markers\n    map.eachLayer((layer) => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        map.removeLayer(layer);\n      }\n    });\n\n    const tempMarker = L.marker([lat, lng], {\n      icon: createMarkerIcon('#FF0000'),\n      permanent: false\n    });\n\n    const tempMarkerData = {\n      map_id: Number(mapId),\n      lat: Number(lat),\n      lng: Number(lng),\n      label: '',\n      description: '',\n      color: '#FF0000',\n      campaign_id: selectedCampaign.id\n    };\n\n    // Create popup with unique IDs\n    const { content, formId, deleteId, submitId } = createPopupContent(tempMarkerData, true);\n    const popup = L.popup({\n      className: 'custom-popup',\n      closeButton: true,\n      autoClose: false,\n      closeOnClick: false\n    }).setContent(content);\n\n    tempMarker.bindPopup(popup);\n\n    // Add click handler for the temporary marker\n    tempMarker.on('click', (e) => {\n      // Stop the event from bubbling up to the map\n      L.DomEvent.stopPropagation(e);\n      \n      // Close other popups first\n      map.eachLayer((layer) => {\n        if (layer instanceof L.Marker && layer !== tempMarker) {\n          layer.closePopup();\n        }\n      });\n      \n      // Open this marker's popup\n      tempMarker.openPopup();\n\n      // Wait for the popup to be added to the DOM\n      setTimeout(() => {\n        const form = document.getElementById(formId);\n        const cancelBtn = document.getElementById(deleteId);\n        const createBtn = document.getElementById(submitId);\n\n        console.log('Temp marker form elements:', { formId, deleteId, submitId, form, cancelBtn, createBtn });\n\n        if (cancelBtn) {\n          cancelBtn.onclick = () => {\n            map.removeLayer(tempMarker);\n          };\n        }\n\n        if (createBtn && form) {\n          createBtn.onclick = async () => {\n            try {\n              if (!selectedCampaign) {\n                throw new Error('No campaign selected');\n              }\n\n              createBtn.disabled = true;\n              \n              const formData = new FormData(form);\n              const newMarker = {\n                map_id: Number(mapId),\n                campaign_id: selectedCampaign.id,\n                lat: Number(lat),\n                lng: Number(lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000',\n                shape: 'default'\n              };\n\n              console.log('Creating marker:', newMarker);\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(newMarker)\n              });\n\n              const responseText = await response.text();\n              console.log('Create marker response:', responseText);\n\n              if (!response.ok) {\n                throw new Error(`Failed to create marker: ${responseText}`);\n              }\n\n              const savedMarker = JSON.parse(responseText);\n              console.log('Saved marker:', savedMarker);\n              \n              const parsedMarker = {\n                ...savedMarker,\n                id: savedMarker.id,\n                lat: Number(savedMarker.lat),\n                lng: Number(savedMarker.lng),\n                label: formData.get('label') || '',\n                description: formData.get('description') || '',\n                color: formData.get('color') || '#FF0000',\n                campaign_id: selectedCampaign.id,\n                map_id: Number(mapId)\n              };\n              \n              console.log('Parsed marker:', parsedMarker);\n              \n              // Remove the temporary marker\n              map.removeLayer(tempMarker);\n              \n              // Add the new marker\n              const marker = L.marker([parsedMarker.lat, parsedMarker.lng], {\n                icon: createMarkerIcon(parsedMarker.color),\n                permanent: true\n              });\n              \n              // Update state before adding to map\n              setMarkers(prev => [...prev, parsedMarker]);\n              \n              // Bind events and add to map\n              bindMarkerEvents(marker, parsedMarker, map);\n              marker.addTo(map);\n            } catch (error) {\n              console.error('Error creating marker:', error);\n              createBtn.disabled = false;\n              alert('Failed to create marker: ' + error.message);\n            }\n          };\n        }\n      }, 0);\n    });\n\n    // Add event listener for popup close\n    tempMarker.on('popupclose', () => {\n      // Clean up the temporary marker if it's still on the map\n      if (map.hasLayer(tempMarker)) {\n        map.removeLayer(tempMarker);\n      }\n    });\n\n    tempMarker.addTo(map).openPopup();\n  };\n\n  const handleMarkerCreate = () => {};\n  const handleMarkerUpdate = () => {};\n  const handleMarkerDelete = () => {};\n  const handleMarkerEdit = () => {};\n\n  if (isLoading || !mapData || !imageDimensions) {\n    return (\n      <div className=\"map-container\">\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>\n          Loading map...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"map-container\">\n      <div style={{ display: 'flex', alignItems: 'center', padding: '0 16px' }}>\n        <h2 style={{ margin: 0, display: 'flex', alignItems: 'center' }}>{mapData.name}</h2>\n        <IconButton\n          aria-label=\"more\"\n          aria-controls=\"map-menu\"\n          aria-haspopup=\"true\"\n          onClick={(e) => setMenuAnchorEl(e.currentTarget)}\n          style={{ marginLeft: '8px', color: '#111827' }}\n        >\n          <DotsThreeVertical size={24} />\n        </IconButton>\n      </div>\n\n      <Menu\n        id=\"map-menu\"\n        anchorEl={menuAnchorEl}\n        keepMounted\n        open={Boolean(menuAnchorEl)}\n        onClose={() => setMenuAnchorEl(null)}\n      >\n        <MenuItem onClick={() => setMenuAnchorEl(null)}>Rename</MenuItem>\n        <MenuItem onClick={() => setMenuAnchorEl(null)}>Delete</MenuItem>\n      </Menu>\n\n      <div ref={mapContainerRef} style={{ height: 'calc(100vh - 80px)', width: '100%' }} />\n    </div>\n  );\n};\n\nexport default Maps;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}