{"ast":null,"code":"var _jsxFileName = \"/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/CampaignLoadingOverlay.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { BeerStein } from \"@phosphor-icons/react\";\nimport './CampaignLoadingOverlay.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst loadingPhrases = ['Swapping campaigns', 'Preparing maps and logs', 'Retreiving treasure', 'How do you want to do this?'];\n\n// Box-Muller transform for normal distribution\nconst normalRandom = (min, max) => {\n  let u = 0,\n    v = 0;\n  while (u === 0) u = Math.random(); // Converting [0,1) to (0,1)\n  while (v === 0) v = Math.random();\n  let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n\n  // Convert to range [0,1]\n  num = (num + 2.5) / 5;\n  // Clamp to [0,1]\n  num = Math.min(Math.max(num, 0), 1);\n\n  // Scale to our desired range\n  return min + num * (max - min);\n};\nconst generateStepDurations = () => {\n  return loadingPhrases.map(() => {\n    // Generate a duration between 1000ms and 3000ms with normal distribution\n    return Math.round(normalRandom(1000, 3000));\n  });\n};\nconst CampaignLoadingOverlay = ({\n  isVisible,\n  onLoadComplete\n}) => {\n  _s();\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isExiting, setIsExiting] = useState(false);\n  const timeoutRef = useRef(null);\n  const stepDurationsRef = useRef([]);\n  useEffect(() => {\n    if (!isVisible) {\n      setCurrentPhraseIndex(0);\n      setProgress(0);\n      setIsExiting(false);\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      return;\n    }\n\n    // Generate new random durations when overlay becomes visible\n    stepDurationsRef.current = generateStepDurations();\n    const totalDuration = stepDurationsRef.current.reduce((a, b) => a + b, 0);\n\n    // Progress per phrase (leaving last bit for final state)\n    const progressPerPhrase = 90 / loadingPhrases.length;\n    setProgress(progressPerPhrase);\n    const runNextStep = index => {\n      if (index >= loadingPhrases.length) {\n        // Final progress push\n        setProgress(100);\n        setTimeout(() => {\n          setIsExiting(true);\n          setTimeout(onLoadComplete, 1000);\n        }, 500);\n        return;\n      }\n      timeoutRef.current = setTimeout(() => {\n        if (index < loadingPhrases.length - 1) {\n          setCurrentPhraseIndex(index + 1);\n          setProgress((index + 2) * progressPerPhrase);\n          runNextStep(index + 1);\n        } else {\n          runNextStep(loadingPhrases.length); // Trigger final state\n        }\n      }, stepDurationsRef.current[index]);\n    };\n\n    // Start the sequence\n    runNextStep(0);\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isVisible, onLoadComplete]);\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `campaign-loading-overlay ${isExiting ? 'exiting' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"campaign-loading-content\",\n      children: [/*#__PURE__*/_jsxDEV(BeerStein, {\n        weight: \"regular\",\n        size: 64,\n        className: \"campaign-loading-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"campaign-loading-phrases\",\n        children: loadingPhrases.map((phrase, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `campaign-loading-phrase ${index === currentPhraseIndex ? 'active' : ''}`,\n          children: phrase\n        }, phrase, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"campaign-loading-progress-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"campaign-loading-progress-bar\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(CampaignLoadingOverlay, \"Jv8L5S0k8MVHAATapp3id0tq14k=\");\n_c = CampaignLoadingOverlay;\nexport default CampaignLoadingOverlay;\nvar _c;\n$RefreshReg$(_c, \"CampaignLoadingOverlay\");","map":{"version":3,"names":["React","useState","useEffect","useRef","BeerStein","jsxDEV","_jsxDEV","loadingPhrases","normalRandom","min","max","u","v","Math","random","num","sqrt","log","cos","PI","generateStepDurations","map","round","CampaignLoadingOverlay","isVisible","onLoadComplete","_s","currentPhraseIndex","setCurrentPhraseIndex","progress","setProgress","isExiting","setIsExiting","timeoutRef","stepDurationsRef","current","clearTimeout","totalDuration","reduce","a","b","progressPerPhrase","length","runNextStep","index","setTimeout","className","children","weight","size","fileName","_jsxFileName","lineNumber","columnNumber","phrase","style","width","_c","$RefreshReg$"],"sources":["/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/CampaignLoadingOverlay.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { BeerStein } from \"@phosphor-icons/react\";\nimport './CampaignLoadingOverlay.css';\n\nconst loadingPhrases = [\n  'Swapping campaigns',\n  'Preparing maps and logs',\n  'Retreiving treasure',\n  'How do you want to do this?'\n];\n\n// Box-Muller transform for normal distribution\nconst normalRandom = (min, max) => {\n  let u = 0, v = 0;\n  while(u === 0) u = Math.random(); // Converting [0,1) to (0,1)\n  while(v === 0) v = Math.random();\n  let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n  \n  // Convert to range [0,1]\n  num = (num + 2.5) / 5;\n  // Clamp to [0,1]\n  num = Math.min(Math.max(num, 0), 1);\n  \n  // Scale to our desired range\n  return min + (num * (max - min));\n};\n\nconst generateStepDurations = () => {\n  return loadingPhrases.map(() => {\n    // Generate a duration between 1000ms and 3000ms with normal distribution\n    return Math.round(normalRandom(1000, 3000));\n  });\n};\n\nconst CampaignLoadingOverlay = ({ isVisible, onLoadComplete }) => {\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isExiting, setIsExiting] = useState(false);\n  const timeoutRef = useRef(null);\n  const stepDurationsRef = useRef([]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      setCurrentPhraseIndex(0);\n      setProgress(0);\n      setIsExiting(false);\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      return;\n    }\n\n    // Generate new random durations when overlay becomes visible\n    stepDurationsRef.current = generateStepDurations();\n    const totalDuration = stepDurationsRef.current.reduce((a, b) => a + b, 0);\n    \n    // Progress per phrase (leaving last bit for final state)\n    const progressPerPhrase = 90 / loadingPhrases.length;\n    setProgress(progressPerPhrase);\n\n    const runNextStep = (index) => {\n      if (index >= loadingPhrases.length) {\n        // Final progress push\n        setProgress(100);\n        setTimeout(() => {\n          setIsExiting(true);\n          setTimeout(onLoadComplete, 1000);\n        }, 500);\n        return;\n      }\n\n      timeoutRef.current = setTimeout(() => {\n        if (index < loadingPhrases.length - 1) {\n          setCurrentPhraseIndex(index + 1);\n          setProgress((index + 2) * progressPerPhrase);\n          runNextStep(index + 1);\n        } else {\n          runNextStep(loadingPhrases.length); // Trigger final state\n        }\n      }, stepDurationsRef.current[index]);\n    };\n\n    // Start the sequence\n    runNextStep(0);\n\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [isVisible, onLoadComplete]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className={`campaign-loading-overlay ${isExiting ? 'exiting' : ''}`}>\n      <div className=\"campaign-loading-content\">\n        <BeerStein \n          weight=\"regular\" \n          size={64} \n          className=\"campaign-loading-icon\"\n        />\n        \n        <div className=\"campaign-loading-phrases\">\n          {loadingPhrases.map((phrase, index) => (\n            <div\n              key={phrase}\n              className={`campaign-loading-phrase ${index === currentPhraseIndex ? 'active' : ''}`}\n            >\n              {phrase}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"campaign-loading-progress-container\">\n          <div \n            className=\"campaign-loading-progress-bar\"\n            style={{ width: `${progress}%` }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CampaignLoadingOverlay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}