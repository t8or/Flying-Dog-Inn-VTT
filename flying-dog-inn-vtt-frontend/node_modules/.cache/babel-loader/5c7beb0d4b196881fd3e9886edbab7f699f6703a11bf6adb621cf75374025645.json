{"ast":null,"code":"var _jsxFileName = \"/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/Maps.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Maps.css';\nimport { useCampaign } from '../contexts/CampaignContext';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { DotsThreeVertical } from \"@phosphor-icons/react\";\n\n// Marker configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MARKER_COLORS = {\n  '#FF0000': 'Red',\n  '#00FF00': 'Green',\n  '#0000FF': 'Blue',\n  '#FFFF00': 'Yellow',\n  '#FF00FF': 'Magenta',\n  '#00FFFF': 'Cyan',\n  '#000000': 'Black'\n};\nconst Maps = ({\n  onMapChange\n}) => {\n  _s();\n  const {\n    id: mapId\n  } = useParams();\n  const navigate = useNavigate();\n  const [mapData, setMapData] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    selectedCampaign\n  } = useCampaign();\n  const mapContainerRef = React.useRef(null);\n  const leafletMapRef = React.useRef(null);\n\n  // Cleanup function\n  const cleanupMap = () => {\n    if (leafletMapRef.current) {\n      leafletMapRef.current.remove();\n      leafletMapRef.current = null;\n    }\n  };\n\n  // Reset state when map changes\n  useEffect(() => {\n    setIsLoading(true);\n    setMapData(null);\n    setImageDimensions(null);\n    setMarkers([]);\n    cleanupMap();\n    return cleanupMap;\n  }, [mapId]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanupMap;\n  }, []);\n\n  // Fetch map data and markers\n  useEffect(() => {\n    if (selectedCampaign && mapId) {\n      fetchMap();\n      fetchMarkers();\n    }\n  }, [mapId, selectedCampaign]);\n  const fetchMap = async () => {\n    if (!selectedCampaign) return;\n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch map');\n      const data = await response.json();\n      setMapData(data);\n\n      // Load image dimensions\n      const img = new Image();\n      img.onload = () => {\n        console.log('Image loaded:', img.width, img.height);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n        setIsLoading(false);\n      };\n      img.onerror = error => {\n        console.error('Failed to load map image:', error);\n        setIsLoading(false);\n      };\n      img.src = `http://localhost:3001/maps/${data.path}`;\n      if (onMapChange) onMapChange(data);\n    } catch (error) {\n      console.error('Error fetching map:', error);\n      setIsLoading(false);\n      navigate('/maps');\n    }\n  };\n  const fetchMarkers = async () => {\n    if (!selectedCampaign || !mapId) return;\n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch markers');\n      const data = await response.json();\n\n      // Convert lat/lng to numbers\n      const parsedMarkers = data.map(marker => ({\n        ...marker,\n        lat: Number(marker.lat),\n        lng: Number(marker.lng)\n      }));\n      setMarkers(parsedMarkers);\n\n      // If map is already initialized, add markers\n      if (leafletMapRef.current) {\n        addMarkersToMap(parsedMarkers, leafletMapRef.current);\n      }\n    } catch (error) {\n      console.error('Error fetching markers:', error);\n    }\n  };\n  const createMarkerIcon = (color = '#FF0000') => {\n    return L.divIcon({\n      className: 'custom-marker',\n      html: `<div class=\"marker-icon\" style=\"color: ${color}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"48\" viewBox=\"0 0 256 256\">\n          <path fill=\"currentColor\" d=\"M128,16a88.1,88.1,0,0,0-88,88c0,75.3,80,132.17,83.41,134.55a8,8,0,0,0,9.18,0C136,236.17,216,179.3,216,104A88.1,88.1,0,0,0,128,16Z\" stroke=\"rgba(0, 0, 0, 0.25)\" stroke-width=\"16\"/>\n        </svg>\n      </div>`,\n      iconSize: [32, 48],\n      iconAnchor: [16, 48],\n      popupAnchor: [0, -24]\n    });\n  };\n  const createPopupContent = (markerData, isNewMarker = false, handlers) => {\n    const uniqueId = Math.random().toString(36).substring(7);\n    const formId = `marker-form-${uniqueId}`;\n    const deleteId = `delete-btn-${uniqueId}`;\n    const submitId = `submit-btn-${uniqueId}`;\n\n    // Create popup content with unique IDs\n    const content = `\n      <div class=\"marker-content\">\n        <form id=\"${formId}\" class=\"marker-form\">\n          <input \n            type=\"text\" \n            name=\"label\" \n            value=\"${markerData.label || ''}\" \n            placeholder=\"Marker Label\" \n            class=\"marker-input\" \n            required\n          />\n          <textarea \n            name=\"description\" \n            placeholder=\"Description (optional)\" \n            class=\"marker-input\" \n            rows=\"2\"\n          >${markerData.description || ''}</textarea>\n          <select name=\"color\" class=\"marker-input\">\n            ${Object.entries(MARKER_COLORS).map(([value, label]) => `\n              <option value=\"${value}\" ${value === (markerData.color || '#FF0000') ? 'selected' : ''}>\n                ${label}\n              </option>\n            `).join('')}\n          </select>\n          <div class=\"marker-actions\">\n            <button type=\"button\" id=\"${deleteId}\" class=\"delete-button\">\n              ${isNewMarker ? 'Cancel' : 'Delete'}\n            </button>\n            <button type=\"button\" id=\"${submitId}\" class=\"dnd-button\">\n              ${isNewMarker ? 'Add Marker' : 'Save Changes'}\n            </button>\n          </div>\n        </form>\n      </div>\n    `;\n\n    // Return both content and IDs for event binding\n    return {\n      content,\n      formId,\n      deleteId,\n      submitId\n    };\n  };\n  const addMarkersToMap = (markersData, targetMap) => {\n    if (!targetMap) return;\n\n    // Only clear temporary markers\n    targetMap.eachLayer(layer => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        targetMap.removeLayer(layer);\n      }\n    });\n\n    // Add new markers\n    markersData.forEach(markerData => {\n      if (!markerData || typeof markerData.lat !== 'number' || typeof markerData.lng !== 'number') {\n        console.warn('Invalid marker data:', markerData);\n        return;\n      }\n\n      // Create new marker\n      const marker = L.marker([markerData.lat, markerData.lng], {\n        icon: createMarkerIcon(markerData.color || '#FF0000'),\n        permanent: true,\n        markerId: markerData.id\n      });\n\n      // Create popup with unique IDs\n      const {\n        content,\n        formId,\n        deleteId,\n        submitId\n      } = createPopupContent(markerData, false);\n      const popup = L.popup({\n        className: 'custom-popup',\n        closeButton: true,\n        autoClose: false,\n        closeOnClick: false\n      }).setContent(content);\n      marker.bindPopup(popup);\n\n      // Clean up old event listeners before adding new ones\n      marker.off('popupopen');\n\n      // Add event listeners when popup opens\n      marker.on('popupopen', () => {\n        // Get elements using unique IDs\n        const form = document.getElementById(formId);\n        const deleteBtn = document.getElementById(deleteId);\n        const submitBtn = document.getElementById(submitId);\n        if (deleteBtn) {\n          // Remove any existing click handlers\n          deleteBtn.replaceWith(deleteBtn.cloneNode(true));\n          const newDeleteBtn = document.getElementById(deleteId);\n          newDeleteBtn.onclick = async () => {\n            try {\n              // Disable the button to prevent multiple clicks\n              newDeleteBtn.disabled = true;\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}?campaign_id=${selectedCampaign.id}`, {\n                method: 'DELETE'\n              });\n              if (!response.ok) throw new Error('Failed to delete marker');\n\n              // Update state first\n              await new Promise(resolve => {\n                setMarkers(prev => {\n                  const updated = prev.filter(m => m.id !== markerData.id);\n                  resolve(updated);\n                  return updated;\n                });\n              });\n\n              // Then remove the marker from the map\n              targetMap.removeLayer(marker);\n            } catch (error) {\n              console.error('Error deleting marker:', error);\n              // Re-enable the button on error\n              newDeleteBtn.disabled = false;\n            }\n          };\n        }\n        if (submitBtn && form) {\n          // Remove any existing click handlers\n          submitBtn.replaceWith(submitBtn.cloneNode(true));\n          const newSubmitBtn = document.getElementById(submitId);\n          newSubmitBtn.onclick = async () => {\n            try {\n              // Disable the button to prevent multiple clicks\n              newSubmitBtn.disabled = true;\n              const formData = new FormData(form);\n              const description = formData.get('description');\n              const updatedMarker = {\n                ...markerData,\n                label: formData.get('label'),\n                description: description || '',\n                // Convert null to empty string\n                color: formData.get('color'),\n                campaign_id: selectedCampaign.id,\n                lat: Number(markerData.lat),\n                lng: Number(markerData.lng),\n                map_id: Number(mapId)\n              };\n              console.log('Updating marker with data:', updatedMarker);\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}`, {\n                method: 'PUT',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(updatedMarker)\n              });\n              if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Failed to update marker: ${errorText}`);\n              }\n              const savedMarker = await response.json();\n\n              // Convert lat/lng to numbers and ensure description is not null\n              const parsedMarker = {\n                ...savedMarker,\n                lat: Number(savedMarker.lat),\n                lng: Number(savedMarker.lng),\n                description: savedMarker.description || '' // Convert null to empty string\n              };\n\n              // Update state first\n              await new Promise(resolve => {\n                setMarkers(prev => {\n                  const updated = prev.map(m => m.id === parsedMarker.id ? parsedMarker : m);\n                  resolve(updated);\n                  return updated;\n                });\n              });\n\n              // Close the popup first\n              marker.closePopup();\n\n              // Update the marker's icon\n              marker.setIcon(createMarkerIcon(parsedMarker.color));\n\n              // Create new popup content with updated data\n              const {\n                content,\n                formId: newFormId,\n                deleteId: newDeleteId,\n                submitId: newSubmitId\n              } = createPopupContent(parsedMarker, false);\n\n              // Create a new popup with the updated content\n              const newPopup = L.popup({\n                className: 'custom-popup',\n                closeButton: true,\n                autoClose: false,\n                closeOnClick: false\n              }).setContent(content);\n\n              // Remove old popup and bind new one\n              marker.unbindPopup();\n              marker.bindPopup(newPopup);\n\n              // Add event listeners for the new popup\n              marker.off('popupopen').on('popupopen', () => {\n                const newForm = document.getElementById(newFormId);\n                const newDeleteBtn = document.getElementById(newDeleteId);\n                const newSubmitBtn = document.getElementById(newSubmitId);\n                if (newDeleteBtn) {\n                  newDeleteBtn.onclick = async () => {\n                    try {\n                      newDeleteBtn.disabled = true;\n                      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${parsedMarker.id}?campaign_id=${selectedCampaign.id}`, {\n                        method: 'DELETE'\n                      });\n                      if (!response.ok) throw new Error('Failed to delete marker');\n                      await new Promise(resolve => {\n                        setMarkers(prev => {\n                          const updated = prev.filter(m => m.id !== parsedMarker.id);\n                          resolve(updated);\n                          return updated;\n                        });\n                      });\n                      marker.remove();\n                    } catch (error) {\n                      console.error('Error deleting marker:', error);\n                      newDeleteBtn.disabled = false;\n                    }\n                  };\n                }\n                if (newSubmitBtn && newForm) {\n                  newSubmitBtn.onclick = async () => {\n                    try {\n                      // Disable the button to prevent multiple clicks\n                      newSubmitBtn.disabled = true;\n                      const formData = new FormData(newForm);\n                      const description = formData.get('description');\n                      const updatedMarker = {\n                        ...parsedMarker,\n                        label: formData.get('label'),\n                        description: description || '',\n                        // Convert null to empty string\n                        color: formData.get('color'),\n                        campaign_id: selectedCampaign.id,\n                        lat: Number(parsedMarker.lat),\n                        lng: Number(parsedMarker.lng),\n                        map_id: Number(mapId)\n                      };\n                      console.log('Updating marker with data:', updatedMarker);\n                      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${parsedMarker.id}`, {\n                        method: 'PUT',\n                        headers: {\n                          'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify(updatedMarker)\n                      });\n                      if (!response.ok) {\n                        const errorText = await response.text();\n                        throw new Error(`Failed to update marker: ${errorText}`);\n                      }\n                      const savedMarker = await response.json();\n\n                      // Convert lat/lng to numbers and ensure description is not null\n                      const parsedUpdatedMarker = {\n                        ...savedMarker,\n                        lat: Number(savedMarker.lat),\n                        lng: Number(savedMarker.lng),\n                        description: savedMarker.description || '' // Convert null to empty string\n                      };\n\n                      // Update state first\n                      await new Promise(resolve => {\n                        setMarkers(prev => {\n                          const updated = prev.map(m => m.id === parsedUpdatedMarker.id ? parsedUpdatedMarker : m);\n                          resolve(updated);\n                          return updated;\n                        });\n                      });\n\n                      // Close the popup first\n                      newPopup.closePopup();\n\n                      // Update the marker's icon\n                      marker.setIcon(createMarkerIcon(parsedUpdatedMarker.color));\n\n                      // Create new popup content with updated data\n                      const {\n                        content\n                      } = createPopupContent(parsedUpdatedMarker, false);\n\n                      // Update the popup content without opening it\n                      newPopup.setContent(content);\n                    } catch (error) {\n                      console.error('Error updating marker:', error);\n                      // Re-enable the button on error\n                      newSubmitBtn.disabled = false;\n                      alert('Failed to update marker: ' + error.message);\n                    }\n                  };\n                }\n              });\n\n              // Clean up event listeners when popup closes\n              marker.off('popupclose').on('popupclose', () => {\n                const newForm = document.getElementById(newFormId);\n                const newDeleteBtn = document.getElementById(newDeleteId);\n                const newSubmitBtn = document.getElementById(newSubmitId);\n                if (newDeleteBtn) newDeleteBtn.onclick = null;\n                if (newSubmitBtn) newSubmitBtn.onclick = null;\n                if (newForm) newForm.onsubmit = null;\n              });\n            } catch (error) {\n              console.error('Error updating marker:', error);\n              // Re-enable the button on error\n              newSubmitBtn.disabled = false;\n              alert('Failed to update marker: ' + error.message);\n            }\n          };\n        }\n      });\n\n      // Clean up event listeners when popup closes\n      marker.on('popupclose', () => {\n        const form = document.getElementById(formId);\n        const deleteBtn = document.getElementById(deleteId);\n        const submitBtn = document.getElementById(submitId);\n        if (deleteBtn) deleteBtn.onclick = null;\n        if (submitBtn) submitBtn.onclick = null;\n        if (form) form.onsubmit = null;\n      });\n      marker.addTo(targetMap);\n    });\n  };\n\n  // Initialize map when data is ready\n  useEffect(() => {\n    if (!mapData || !imageDimensions || !mapContainerRef.current) return;\n    try {\n      console.log('Initializing map with dimensions:', imageDimensions);\n\n      // Clean up any existing map first\n      cleanupMap();\n      const bounds = [[0, 0], [imageDimensions.height, imageDimensions.width]];\n      const map = L.map(mapContainerRef.current, {\n        crs: L.CRS.Simple,\n        maxZoom: 2,\n        minZoom: -2,\n        maxBounds: bounds,\n        zoomControl: true\n      });\n\n      // Store the map instance in the ref\n      leafletMapRef.current = map;\n      const imageOverlay = L.imageOverlay(`http://localhost:3001/maps/${mapData.path}`, bounds);\n      imageOverlay.addTo(map);\n      map.fitBounds(bounds);\n\n      // Close any open popups when clicking anywhere except inside a popup\n      map.on('click', e => {\n        const clickedElement = e.originalEvent.target;\n        // Check if the clicked element is inside a popup\n        if (!clickedElement.closest('.leaflet-popup')) {\n          map.eachLayer(layer => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      });\n\n      // Handle ESC key to close popups\n      const handleEscKey = e => {\n        if (e.key === 'Escape') {\n          map.eachLayer(layer => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      };\n\n      // Add ESC key listener\n      document.addEventListener('keydown', handleEscKey);\n\n      // Wait for the image to load before setting up markers\n      imageOverlay.once('load', () => {\n        console.log('Image overlay loaded');\n\n        // Add click handler for new markers\n        map.on('click', e => {\n          // Only create new markers if clicking directly on the map\n          if (e.originalEvent.target === map.getContainer() || e.originalEvent.target.classList.contains('leaflet-tile')) {\n            handleMapClick(e, map);\n          }\n        });\n\n        // Add existing markers if any\n        if (markers.length > 0) {\n          console.log('Adding existing markers:', markers.length);\n          addMarkersToMap(markers, map);\n        }\n        setIsLoading(false);\n      });\n\n      // Cleanup function\n      return () => {\n        document.removeEventListener('keydown', handleEscKey);\n        cleanupMap();\n      };\n    } catch (error) {\n      console.error('Error initializing map:', error);\n      setIsLoading(false);\n    }\n  }, [mapData, imageDimensions]);\n\n  // Modify handleMapClick to close any open popups before creating a new one\n  const handleMapClick = (e, map) => {\n    if (!selectedCampaign || !mapId || !map) return;\n\n    // Close any open popups first\n    map.eachLayer(layer => {\n      if (layer instanceof L.Marker) {\n        layer.closePopup();\n      }\n    });\n    const {\n      lat,\n      lng\n    } = e.latlng;\n\n    // Remove any existing temporary markers\n    map.eachLayer(layer => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        map.removeLayer(layer);\n      }\n    });\n    const tempMarker = L.marker([lat, lng], {\n      icon: createMarkerIcon('#FF0000'),\n      permanent: false\n    });\n    const tempMarkerData = {\n      map_id: Number(mapId),\n      lat: Number(lat),\n      lng: Number(lng),\n      label: '',\n      description: '',\n      color: '#FF0000',\n      campaign_id: selectedCampaign.id\n    };\n\n    // Create popup with unique IDs\n    const {\n      content,\n      formId,\n      deleteId,\n      submitId\n    } = createPopupContent(tempMarkerData, true);\n    const popup = L.popup({\n      className: 'custom-popup',\n      closeButton: true,\n      autoClose: false,\n      closeOnClick: false\n    }).setContent(content);\n    tempMarker.bindPopup(popup);\n\n    // Add event listeners when popup opens\n    tempMarker.on('popupopen', () => {\n      const form = document.getElementById(formId);\n      const cancelBtn = document.getElementById(deleteId);\n      const createBtn = document.getElementById(submitId);\n      if (cancelBtn) {\n        cancelBtn.onclick = () => {\n          map.removeLayer(tempMarker);\n        };\n      }\n      if (createBtn && form) {\n        createBtn.onclick = async () => {\n          try {\n            createBtn.disabled = true; // Prevent double clicks\n\n            const formData = new FormData(form);\n            const newMarker = {\n              ...tempMarkerData,\n              label: formData.get('label'),\n              description: formData.get('description'),\n              color: formData.get('color')\n            };\n            const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(newMarker)\n            });\n            if (!response.ok) throw new Error('Failed to create marker');\n            const savedMarker = await response.json();\n\n            // Convert lat/lng to numbers\n            const parsedMarker = {\n              ...savedMarker,\n              lat: Number(savedMarker.lat),\n              lng: Number(savedMarker.lng)\n            };\n            setMarkers(prev => [...prev, parsedMarker]);\n            map.removeLayer(tempMarker);\n\n            // Add the new marker\n            const marker = L.marker([parsedMarker.lat, parsedMarker.lng], {\n              icon: createMarkerIcon(parsedMarker.color || '#FF0000'),\n              permanent: true,\n              markerId: parsedMarker.id\n            });\n            const {\n              content\n            } = createPopupContent(parsedMarker, false);\n            const newPopup = L.popup({\n              className: 'custom-popup',\n              closeButton: true,\n              autoClose: false,\n              closeOnClick: false\n            }).setContent(content);\n            marker.bindPopup(newPopup);\n            marker.addTo(map);\n          } catch (error) {\n            console.error('Error creating marker:', error);\n            createBtn.disabled = false;\n            alert('Failed to create marker: ' + error.message);\n          }\n        };\n      }\n    });\n\n    // Add event listener for popup close\n    tempMarker.on('popupclose', () => {\n      // Clean up the temporary marker if it's still on the map\n      if (map.hasLayer(tempMarker)) {\n        map.removeLayer(tempMarker);\n      }\n    });\n    tempMarker.addTo(map).openPopup();\n  };\n  const handleMarkerCreate = () => {};\n  const handleMarkerUpdate = () => {};\n  const handleMarkerDelete = () => {};\n  const handleMarkerEdit = () => {};\n  if (isLoading || !mapData || !imageDimensions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100%'\n        },\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 700,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          margin: 0,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: mapData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"more\",\n        \"aria-controls\": \"map-menu\",\n        \"aria-haspopup\": \"true\",\n        onClick: e => setMenuAnchorEl(e.currentTarget),\n        style: {\n          marginLeft: '8px',\n          color: '#111827'\n        },\n        children: /*#__PURE__*/_jsxDEV(DotsThreeVertical, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"map-menu\",\n      anchorEl: menuAnchorEl,\n      keepMounted: true,\n      open: Boolean(menuAnchorEl),\n      onClose: () => setMenuAnchorEl(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setMenuAnchorEl(null),\n        children: \"Rename\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setMenuAnchorEl(null),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 723,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      style: {\n        height: 'calc(100vh - 80px)',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 709,\n    columnNumber: 5\n  }, this);\n};\n_s(Maps, \"D30yCAlSUcVkQ/D9gtJR1YweAWs=\", false, function () {\n  return [useParams, useNavigate, useCampaign];\n});\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","L","useCampaign","IconButton","Menu","MenuItem","DotsThreeVertical","jsxDEV","_jsxDEV","MARKER_COLORS","Maps","onMapChange","_s","id","mapId","navigate","mapData","setMapData","markers","setMarkers","menuAnchorEl","setMenuAnchorEl","imageDimensions","setImageDimensions","isLoading","setIsLoading","selectedCampaign","mapContainerRef","useRef","leafletMapRef","cleanupMap","current","remove","fetchMap","fetchMarkers","response","fetch","ok","Error","data","json","img","Image","onload","console","log","width","height","onerror","error","src","path","parsedMarkers","map","marker","lat","Number","lng","addMarkersToMap","createMarkerIcon","color","divIcon","className","html","iconSize","iconAnchor","popupAnchor","createPopupContent","markerData","isNewMarker","handlers","uniqueId","Math","random","toString","substring","formId","deleteId","submitId","content","label","description","Object","entries","value","join","markersData","targetMap","eachLayer","layer","Marker","options","permanent","removeLayer","forEach","warn","icon","markerId","popup","closeButton","autoClose","closeOnClick","setContent","bindPopup","off","on","form","document","getElementById","deleteBtn","submitBtn","replaceWith","cloneNode","newDeleteBtn","onclick","disabled","method","Promise","resolve","prev","updated","filter","m","newSubmitBtn","formData","FormData","get","updatedMarker","campaign_id","map_id","headers","body","JSON","stringify","errorText","text","savedMarker","parsedMarker","closePopup","setIcon","newFormId","newDeleteId","newSubmitId","newPopup","unbindPopup","newForm","parsedUpdatedMarker","alert","message","onsubmit","addTo","bounds","crs","CRS","Simple","maxZoom","minZoom","maxBounds","zoomControl","imageOverlay","fitBounds","e","clickedElement","originalEvent","target","closest","handleEscKey","key","addEventListener","once","getContainer","classList","contains","handleMapClick","length","removeEventListener","latlng","tempMarker","tempMarkerData","cancelBtn","createBtn","newMarker","hasLayer","openPopup","handleMarkerCreate","handleMarkerUpdate","handleMarkerDelete","handleMarkerEdit","children","style","display","alignItems","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","padding","margin","name","onClick","currentTarget","marginLeft","size","anchorEl","keepMounted","open","Boolean","onClose","ref","_c","$RefreshReg$"],"sources":["/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/Maps.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Maps.css';\nimport { useCampaign } from '../contexts/CampaignContext';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { DotsThreeVertical } from \"@phosphor-icons/react\";\n\n// Marker configuration\nconst MARKER_COLORS = {\n  '#FF0000': 'Red',\n  '#00FF00': 'Green',\n  '#0000FF': 'Blue',\n  '#FFFF00': 'Yellow',\n  '#FF00FF': 'Magenta',\n  '#00FFFF': 'Cyan',\n  '#000000': 'Black'\n};\n\nconst Maps = ({ onMapChange }) => {\n  const { id: mapId } = useParams();\n  const navigate = useNavigate();\n  const [mapData, setMapData] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { selectedCampaign } = useCampaign();\n  const mapContainerRef = React.useRef(null);\n  const leafletMapRef = React.useRef(null);\n\n  // Cleanup function\n  const cleanupMap = () => {\n    if (leafletMapRef.current) {\n      leafletMapRef.current.remove();\n      leafletMapRef.current = null;\n    }\n  };\n\n  // Reset state when map changes\n  useEffect(() => {\n    setIsLoading(true);\n    setMapData(null);\n    setImageDimensions(null);\n    setMarkers([]);\n    cleanupMap();\n    return cleanupMap;\n  }, [mapId]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanupMap;\n  }, []);\n\n  // Fetch map data and markers\n  useEffect(() => {\n    if (selectedCampaign && mapId) {\n      fetchMap();\n      fetchMarkers();\n    }\n  }, [mapId, selectedCampaign]);\n\n  const fetchMap = async () => {\n    if (!selectedCampaign) return;\n    \n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch map');\n      const data = await response.json();\n      setMapData(data);\n      \n      // Load image dimensions\n      const img = new Image();\n      img.onload = () => {\n        console.log('Image loaded:', img.width, img.height);\n        setImageDimensions({ width: img.width, height: img.height });\n        setIsLoading(false);\n      };\n      img.onerror = (error) => {\n        console.error('Failed to load map image:', error);\n        setIsLoading(false);\n      };\n      img.src = `http://localhost:3001/maps/${data.path}`;\n      \n      if (onMapChange) onMapChange(data);\n    } catch (error) {\n      console.error('Error fetching map:', error);\n      setIsLoading(false);\n      navigate('/maps');\n    }\n  };\n\n  const fetchMarkers = async () => {\n    if (!selectedCampaign || !mapId) return;\n    \n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch markers');\n      const data = await response.json();\n      \n      // Convert lat/lng to numbers\n      const parsedMarkers = data.map(marker => ({\n        ...marker,\n        lat: Number(marker.lat),\n        lng: Number(marker.lng)\n      }));\n      \n      setMarkers(parsedMarkers);\n      \n      // If map is already initialized, add markers\n      if (leafletMapRef.current) {\n        addMarkersToMap(parsedMarkers, leafletMapRef.current);\n      }\n    } catch (error) {\n      console.error('Error fetching markers:', error);\n    }\n  };\n\n  const createMarkerIcon = (color = '#FF0000') => {\n    return L.divIcon({\n      className: 'custom-marker',\n      html: `<div class=\"marker-icon\" style=\"color: ${color}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"48\" viewBox=\"0 0 256 256\">\n          <path fill=\"currentColor\" d=\"M128,16a88.1,88.1,0,0,0-88,88c0,75.3,80,132.17,83.41,134.55a8,8,0,0,0,9.18,0C136,236.17,216,179.3,216,104A88.1,88.1,0,0,0,128,16Z\" stroke=\"rgba(0, 0, 0, 0.25)\" stroke-width=\"16\"/>\n        </svg>\n      </div>`,\n      iconSize: [32, 48],\n      iconAnchor: [16, 48],\n      popupAnchor: [0, -24]\n    });\n  };\n\n  const createPopupContent = (markerData, isNewMarker = false, handlers) => {\n    const uniqueId = Math.random().toString(36).substring(7);\n    const formId = `marker-form-${uniqueId}`;\n    const deleteId = `delete-btn-${uniqueId}`;\n    const submitId = `submit-btn-${uniqueId}`;\n\n    // Create popup content with unique IDs\n    const content = `\n      <div class=\"marker-content\">\n        <form id=\"${formId}\" class=\"marker-form\">\n          <input \n            type=\"text\" \n            name=\"label\" \n            value=\"${markerData.label || ''}\" \n            placeholder=\"Marker Label\" \n            class=\"marker-input\" \n            required\n          />\n          <textarea \n            name=\"description\" \n            placeholder=\"Description (optional)\" \n            class=\"marker-input\" \n            rows=\"2\"\n          >${markerData.description || ''}</textarea>\n          <select name=\"color\" class=\"marker-input\">\n            ${Object.entries(MARKER_COLORS).map(([value, label]) => `\n              <option value=\"${value}\" ${value === (markerData.color || '#FF0000') ? 'selected' : ''}>\n                ${label}\n              </option>\n            `).join('')}\n          </select>\n          <div class=\"marker-actions\">\n            <button type=\"button\" id=\"${deleteId}\" class=\"delete-button\">\n              ${isNewMarker ? 'Cancel' : 'Delete'}\n            </button>\n            <button type=\"button\" id=\"${submitId}\" class=\"dnd-button\">\n              ${isNewMarker ? 'Add Marker' : 'Save Changes'}\n            </button>\n          </div>\n        </form>\n      </div>\n    `;\n\n    // Return both content and IDs for event binding\n    return { content, formId, deleteId, submitId };\n  };\n\n  const addMarkersToMap = (markersData, targetMap) => {\n    if (!targetMap) return;\n\n    // Only clear temporary markers\n    targetMap.eachLayer((layer) => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        targetMap.removeLayer(layer);\n      }\n    });\n\n    // Add new markers\n    markersData.forEach(markerData => {\n      if (!markerData || typeof markerData.lat !== 'number' || typeof markerData.lng !== 'number') {\n        console.warn('Invalid marker data:', markerData);\n        return;\n      }\n\n      // Create new marker\n      const marker = L.marker([markerData.lat, markerData.lng], {\n        icon: createMarkerIcon(markerData.color || '#FF0000'),\n        permanent: true,\n        markerId: markerData.id\n      });\n\n      // Create popup with unique IDs\n      const { content, formId, deleteId, submitId } = createPopupContent(markerData, false);\n      const popup = L.popup({\n        className: 'custom-popup',\n        closeButton: true,\n        autoClose: false,\n        closeOnClick: false\n      }).setContent(content);\n\n      marker.bindPopup(popup);\n\n      // Clean up old event listeners before adding new ones\n      marker.off('popupopen');\n\n      // Add event listeners when popup opens\n      marker.on('popupopen', () => {\n        // Get elements using unique IDs\n        const form = document.getElementById(formId);\n        const deleteBtn = document.getElementById(deleteId);\n        const submitBtn = document.getElementById(submitId);\n\n        if (deleteBtn) {\n          // Remove any existing click handlers\n          deleteBtn.replaceWith(deleteBtn.cloneNode(true));\n          const newDeleteBtn = document.getElementById(deleteId);\n          \n          newDeleteBtn.onclick = async () => {\n            try {\n              // Disable the button to prevent multiple clicks\n              newDeleteBtn.disabled = true;\n              \n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}?campaign_id=${selectedCampaign.id}`, {\n                method: 'DELETE',\n              });\n              \n              if (!response.ok) throw new Error('Failed to delete marker');\n              \n              // Update state first\n              await new Promise(resolve => {\n                setMarkers(prev => {\n                  const updated = prev.filter(m => m.id !== markerData.id);\n                  resolve(updated);\n                  return updated;\n                });\n              });\n\n              // Then remove the marker from the map\n              targetMap.removeLayer(marker);\n            } catch (error) {\n              console.error('Error deleting marker:', error);\n              // Re-enable the button on error\n              newDeleteBtn.disabled = false;\n            }\n          };\n        }\n\n        if (submitBtn && form) {\n          // Remove any existing click handlers\n          submitBtn.replaceWith(submitBtn.cloneNode(true));\n          const newSubmitBtn = document.getElementById(submitId);\n          \n          newSubmitBtn.onclick = async () => {\n            try {\n              // Disable the button to prevent multiple clicks\n              newSubmitBtn.disabled = true;\n              \n              const formData = new FormData(form);\n              const description = formData.get('description');\n              const updatedMarker = {\n                ...markerData,\n                label: formData.get('label'),\n                description: description || '', // Convert null to empty string\n                color: formData.get('color'),\n                campaign_id: selectedCampaign.id,\n                lat: Number(markerData.lat),\n                lng: Number(markerData.lng),\n                map_id: Number(mapId)\n              };\n\n              console.log('Updating marker with data:', updatedMarker);\n\n              const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}`, {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(updatedMarker)\n              });\n\n              if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(`Failed to update marker: ${errorText}`);\n              }\n              \n              const savedMarker = await response.json();\n              \n              // Convert lat/lng to numbers and ensure description is not null\n              const parsedMarker = {\n                ...savedMarker,\n                lat: Number(savedMarker.lat),\n                lng: Number(savedMarker.lng),\n                description: savedMarker.description || '' // Convert null to empty string\n              };\n              \n              // Update state first\n              await new Promise(resolve => {\n                setMarkers(prev => {\n                  const updated = prev.map(m => m.id === parsedMarker.id ? parsedMarker : m);\n                  resolve(updated);\n                  return updated;\n                });\n              });\n\n              // Close the popup first\n              marker.closePopup();\n\n              // Update the marker's icon\n              marker.setIcon(createMarkerIcon(parsedMarker.color));\n              \n              // Create new popup content with updated data\n              const { content, formId: newFormId, deleteId: newDeleteId, submitId: newSubmitId } = createPopupContent(parsedMarker, false);\n              \n              // Create a new popup with the updated content\n              const newPopup = L.popup({\n                className: 'custom-popup',\n                closeButton: true,\n                autoClose: false,\n                closeOnClick: false\n              }).setContent(content);\n\n              // Remove old popup and bind new one\n              marker.unbindPopup();\n              marker.bindPopup(newPopup);\n\n              // Add event listeners for the new popup\n              marker.off('popupopen').on('popupopen', () => {\n                const newForm = document.getElementById(newFormId);\n                const newDeleteBtn = document.getElementById(newDeleteId);\n                const newSubmitBtn = document.getElementById(newSubmitId);\n\n                if (newDeleteBtn) {\n                  newDeleteBtn.onclick = async () => {\n                    try {\n                      newDeleteBtn.disabled = true;\n                      \n                      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${parsedMarker.id}?campaign_id=${selectedCampaign.id}`, {\n                        method: 'DELETE',\n                      });\n                      \n                      if (!response.ok) throw new Error('Failed to delete marker');\n                      \n                      await new Promise(resolve => {\n                        setMarkers(prev => {\n                          const updated = prev.filter(m => m.id !== parsedMarker.id);\n                          resolve(updated);\n                          return updated;\n                        });\n                      });\n\n                      marker.remove();\n                    } catch (error) {\n                      console.error('Error deleting marker:', error);\n                      newDeleteBtn.disabled = false;\n                    }\n                  };\n                }\n\n                if (newSubmitBtn && newForm) {\n                  newSubmitBtn.onclick = async () => {\n                    try {\n                      // Disable the button to prevent multiple clicks\n                      newSubmitBtn.disabled = true;\n                      \n                      const formData = new FormData(newForm);\n                      const description = formData.get('description');\n                      const updatedMarker = {\n                        ...parsedMarker,\n                        label: formData.get('label'),\n                        description: description || '', // Convert null to empty string\n                        color: formData.get('color'),\n                        campaign_id: selectedCampaign.id,\n                        lat: Number(parsedMarker.lat),\n                        lng: Number(parsedMarker.lng),\n                        map_id: Number(mapId)\n                      };\n\n                      console.log('Updating marker with data:', updatedMarker);\n\n                      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${parsedMarker.id}`, {\n                        method: 'PUT',\n                        headers: { 'Content-Type': 'application/json' },\n                        body: JSON.stringify(updatedMarker)\n                      });\n\n                      if (!response.ok) {\n                        const errorText = await response.text();\n                        throw new Error(`Failed to update marker: ${errorText}`);\n                      }\n                      \n                      const savedMarker = await response.json();\n                      \n                      // Convert lat/lng to numbers and ensure description is not null\n                      const parsedUpdatedMarker = {\n                        ...savedMarker,\n                        lat: Number(savedMarker.lat),\n                        lng: Number(savedMarker.lng),\n                        description: savedMarker.description || '' // Convert null to empty string\n                      };\n                      \n                      // Update state first\n                      await new Promise(resolve => {\n                        setMarkers(prev => {\n                          const updated = prev.map(m => m.id === parsedUpdatedMarker.id ? parsedUpdatedMarker : m);\n                          resolve(updated);\n                          return updated;\n                        });\n                      });\n\n                      // Close the popup first\n                      newPopup.closePopup();\n\n                      // Update the marker's icon\n                      marker.setIcon(createMarkerIcon(parsedUpdatedMarker.color));\n                      \n                      // Create new popup content with updated data\n                      const { content } = createPopupContent(parsedUpdatedMarker, false);\n                      \n                      // Update the popup content without opening it\n                      newPopup.setContent(content);\n                    } catch (error) {\n                      console.error('Error updating marker:', error);\n                      // Re-enable the button on error\n                      newSubmitBtn.disabled = false;\n                      alert('Failed to update marker: ' + error.message);\n                    }\n                  };\n                }\n              });\n\n              // Clean up event listeners when popup closes\n              marker.off('popupclose').on('popupclose', () => {\n                const newForm = document.getElementById(newFormId);\n                const newDeleteBtn = document.getElementById(newDeleteId);\n                const newSubmitBtn = document.getElementById(newSubmitId);\n\n                if (newDeleteBtn) newDeleteBtn.onclick = null;\n                if (newSubmitBtn) newSubmitBtn.onclick = null;\n                if (newForm) newForm.onsubmit = null;\n              });\n              \n            } catch (error) {\n              console.error('Error updating marker:', error);\n              // Re-enable the button on error\n              newSubmitBtn.disabled = false;\n              alert('Failed to update marker: ' + error.message);\n            }\n          };\n        }\n      });\n\n      // Clean up event listeners when popup closes\n      marker.on('popupclose', () => {\n        const form = document.getElementById(formId);\n        const deleteBtn = document.getElementById(deleteId);\n        const submitBtn = document.getElementById(submitId);\n\n        if (deleteBtn) deleteBtn.onclick = null;\n        if (submitBtn) submitBtn.onclick = null;\n        if (form) form.onsubmit = null;\n      });\n\n      marker.addTo(targetMap);\n    });\n  };\n\n  // Initialize map when data is ready\n  useEffect(() => {\n    if (!mapData || !imageDimensions || !mapContainerRef.current) return;\n\n    try {\n      console.log('Initializing map with dimensions:', imageDimensions);\n      \n      // Clean up any existing map first\n      cleanupMap();\n\n      const bounds = [[0, 0], [imageDimensions.height, imageDimensions.width]];\n      const map = L.map(mapContainerRef.current, {\n        crs: L.CRS.Simple,\n        maxZoom: 2,\n        minZoom: -2,\n        maxBounds: bounds,\n        zoomControl: true\n      });\n\n      // Store the map instance in the ref\n      leafletMapRef.current = map;\n\n      const imageOverlay = L.imageOverlay(`http://localhost:3001/maps/${mapData.path}`, bounds);\n      imageOverlay.addTo(map);\n      map.fitBounds(bounds);\n\n      // Close any open popups when clicking anywhere except inside a popup\n      map.on('click', (e) => {\n        const clickedElement = e.originalEvent.target;\n        // Check if the clicked element is inside a popup\n        if (!clickedElement.closest('.leaflet-popup')) {\n          map.eachLayer((layer) => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      });\n\n      // Handle ESC key to close popups\n      const handleEscKey = (e) => {\n        if (e.key === 'Escape') {\n          map.eachLayer((layer) => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      };\n\n      // Add ESC key listener\n      document.addEventListener('keydown', handleEscKey);\n\n      // Wait for the image to load before setting up markers\n      imageOverlay.once('load', () => {\n        console.log('Image overlay loaded');\n\n        // Add click handler for new markers\n        map.on('click', (e) => {\n          // Only create new markers if clicking directly on the map\n          if (e.originalEvent.target === map.getContainer() || e.originalEvent.target.classList.contains('leaflet-tile')) {\n            handleMapClick(e, map);\n          }\n        });\n\n        // Add existing markers if any\n        if (markers.length > 0) {\n          console.log('Adding existing markers:', markers.length);\n          addMarkersToMap(markers, map);\n        }\n\n        setIsLoading(false);\n      });\n\n      // Cleanup function\n      return () => {\n        document.removeEventListener('keydown', handleEscKey);\n        cleanupMap();\n      };\n\n    } catch (error) {\n      console.error('Error initializing map:', error);\n      setIsLoading(false);\n    }\n  }, [mapData, imageDimensions]);\n\n  // Modify handleMapClick to close any open popups before creating a new one\n  const handleMapClick = (e, map) => {\n    if (!selectedCampaign || !mapId || !map) return;\n\n    // Close any open popups first\n    map.eachLayer((layer) => {\n      if (layer instanceof L.Marker) {\n        layer.closePopup();\n      }\n    });\n\n    const { lat, lng } = e.latlng;\n    \n    // Remove any existing temporary markers\n    map.eachLayer((layer) => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        map.removeLayer(layer);\n      }\n    });\n\n    const tempMarker = L.marker([lat, lng], {\n      icon: createMarkerIcon('#FF0000'),\n      permanent: false\n    });\n\n    const tempMarkerData = {\n      map_id: Number(mapId),\n      lat: Number(lat),\n      lng: Number(lng),\n      label: '',\n      description: '',\n      color: '#FF0000',\n      campaign_id: selectedCampaign.id\n    };\n\n    // Create popup with unique IDs\n    const { content, formId, deleteId, submitId } = createPopupContent(tempMarkerData, true);\n    const popup = L.popup({\n      className: 'custom-popup',\n      closeButton: true,\n      autoClose: false,\n      closeOnClick: false\n    }).setContent(content);\n\n    tempMarker.bindPopup(popup);\n\n    // Add event listeners when popup opens\n    tempMarker.on('popupopen', () => {\n      const form = document.getElementById(formId);\n      const cancelBtn = document.getElementById(deleteId);\n      const createBtn = document.getElementById(submitId);\n\n      if (cancelBtn) {\n        cancelBtn.onclick = () => {\n          map.removeLayer(tempMarker);\n        };\n      }\n\n      if (createBtn && form) {\n        createBtn.onclick = async () => {\n          try {\n            createBtn.disabled = true; // Prevent double clicks\n            \n            const formData = new FormData(form);\n            const newMarker = {\n              ...tempMarkerData,\n              label: formData.get('label'),\n              description: formData.get('description'),\n              color: formData.get('color')\n            };\n\n            const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers`, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(newMarker)\n            });\n\n            if (!response.ok) throw new Error('Failed to create marker');\n            const savedMarker = await response.json();\n            \n            // Convert lat/lng to numbers\n            const parsedMarker = {\n              ...savedMarker,\n              lat: Number(savedMarker.lat),\n              lng: Number(savedMarker.lng)\n            };\n            \n            setMarkers(prev => [...prev, parsedMarker]);\n            map.removeLayer(tempMarker);\n            \n            // Add the new marker\n            const marker = L.marker([parsedMarker.lat, parsedMarker.lng], {\n              icon: createMarkerIcon(parsedMarker.color || '#FF0000'),\n              permanent: true,\n              markerId: parsedMarker.id\n            });\n            \n            const { content } = createPopupContent(parsedMarker, false);\n            const newPopup = L.popup({\n              className: 'custom-popup',\n              closeButton: true,\n              autoClose: false,\n              closeOnClick: false\n            }).setContent(content);\n            \n            marker.bindPopup(newPopup);\n            marker.addTo(map);\n          } catch (error) {\n            console.error('Error creating marker:', error);\n            createBtn.disabled = false;\n            alert('Failed to create marker: ' + error.message);\n          }\n        };\n      }\n    });\n\n    // Add event listener for popup close\n    tempMarker.on('popupclose', () => {\n      // Clean up the temporary marker if it's still on the map\n      if (map.hasLayer(tempMarker)) {\n        map.removeLayer(tempMarker);\n      }\n    });\n\n    tempMarker.addTo(map).openPopup();\n  };\n\n  const handleMarkerCreate = () => {};\n  const handleMarkerUpdate = () => {};\n  const handleMarkerDelete = () => {};\n  const handleMarkerEdit = () => {};\n\n  if (isLoading || !mapData || !imageDimensions) {\n    return (\n      <div className=\"map-container\">\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>\n          Loading map...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"map-container\">\n      <div style={{ display: 'flex', alignItems: 'center', padding: '0 16px' }}>\n        <h2 style={{ margin: 0, display: 'flex', alignItems: 'center' }}>{mapData.name}</h2>\n        <IconButton\n          aria-label=\"more\"\n          aria-controls=\"map-menu\"\n          aria-haspopup=\"true\"\n          onClick={(e) => setMenuAnchorEl(e.currentTarget)}\n          style={{ marginLeft: '8px', color: '#111827' }}\n        >\n          <DotsThreeVertical size={24} />\n        </IconButton>\n      </div>\n\n      <Menu\n        id=\"map-menu\"\n        anchorEl={menuAnchorEl}\n        keepMounted\n        open={Boolean(menuAnchorEl)}\n        onClose={() => setMenuAnchorEl(null)}\n      >\n        <MenuItem onClick={() => setMenuAnchorEl(null)}>Rename</MenuItem>\n        <MenuItem onClick={() => setMenuAnchorEl(null)}>Delete</MenuItem>\n      </Menu>\n\n      <div ref={mapContainerRef} style={{ height: 'calc(100vh - 80px)', width: '100%' }} />\n    </div>\n  );\n};\n\nexport default Maps;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}