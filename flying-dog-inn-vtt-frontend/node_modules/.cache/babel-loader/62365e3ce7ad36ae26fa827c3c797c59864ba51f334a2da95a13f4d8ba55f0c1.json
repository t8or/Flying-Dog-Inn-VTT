{"ast":null,"code":"var _jsxFileName = \"/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/Maps.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Maps.css';\nimport { useCampaign } from '../contexts/CampaignContext';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { DotsThreeVertical } from \"@phosphor-icons/react\";\n\n// Marker configuration\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MARKER_COLORS = {\n  '#FF0000': 'Red',\n  '#00FF00': 'Green',\n  '#0000FF': 'Blue',\n  '#FFFF00': 'Yellow',\n  '#FF00FF': 'Magenta',\n  '#00FFFF': 'Cyan',\n  '#000000': 'Black'\n};\nconst Maps = ({\n  onMapChange\n}) => {\n  _s();\n  const {\n    id: mapId\n  } = useParams();\n  const navigate = useNavigate();\n  const [mapData, setMapData] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const {\n    selectedCampaign\n  } = useCampaign();\n  const mapContainerRef = React.useRef(null);\n  const leafletMapRef = React.useRef(null);\n\n  // Cleanup function\n  const cleanupMap = () => {\n    if (leafletMapRef.current) {\n      leafletMapRef.current.remove();\n      leafletMapRef.current = null;\n    }\n  };\n\n  // Reset state when map changes\n  useEffect(() => {\n    setIsLoading(true);\n    setMapData(null);\n    setImageDimensions(null);\n    setMarkers([]);\n    cleanupMap();\n    return cleanupMap;\n  }, [mapId]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanupMap;\n  }, []);\n\n  // Fetch map data and markers\n  useEffect(() => {\n    if (selectedCampaign && mapId) {\n      fetchMap();\n      fetchMarkers();\n    }\n  }, [mapId, selectedCampaign]);\n  const fetchMap = async () => {\n    if (!selectedCampaign) return;\n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch map');\n      const data = await response.json();\n      setMapData(data);\n\n      // Load image dimensions\n      const img = new Image();\n      img.onload = () => {\n        console.log('Image loaded:', img.width, img.height);\n        setImageDimensions({\n          width: img.width,\n          height: img.height\n        });\n        setIsLoading(false);\n      };\n      img.onerror = error => {\n        console.error('Failed to load map image:', error);\n        setIsLoading(false);\n      };\n      img.src = `http://localhost:3001/maps/${data.path}`;\n      if (onMapChange) onMapChange(data);\n    } catch (error) {\n      console.error('Error fetching map:', error);\n      setIsLoading(false);\n      navigate('/maps');\n    }\n  };\n  const fetchMarkers = async () => {\n    if (!selectedCampaign || !mapId) return;\n    try {\n      console.log('Fetching markers for campaign:', selectedCampaign.id, 'map:', mapId);\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers?campaign_id=${selectedCampaign.id}`);\n      const responseText = await response.text();\n      console.log('Fetch markers response:', responseText);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch markers: ${responseText}`);\n      }\n      const data = JSON.parse(responseText);\n      console.log('Parsed markers:', data);\n\n      // Convert lat/lng to numbers\n      const parsedMarkers = data.map(marker => ({\n        ...marker,\n        lat: Number(marker.lat),\n        lng: Number(marker.lng),\n        campaign_id: selectedCampaign.id // Ensure campaign_id is set\n      }));\n      console.log('Processed markers:', parsedMarkers);\n      setMarkers(parsedMarkers);\n\n      // If map is already initialized, add markers\n      if (leafletMapRef.current) {\n        addMarkersToMap(parsedMarkers, leafletMapRef.current);\n      }\n    } catch (error) {\n      console.error('Error fetching markers:', error);\n    }\n  };\n  const createMarkerIcon = (color = '#FF0000') => {\n    return L.divIcon({\n      className: 'custom-marker',\n      html: `<div class=\"marker-icon\" style=\"color: ${color}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"48\" viewBox=\"0 0 256 256\">\n          <path fill=\"currentColor\" d=\"M128,16a88.1,88.1,0,0,0-88,88c0,75.3,80,132.17,83.41,134.55a8,8,0,0,0,9.18,0C136,236.17,216,179.3,216,104A88.1,88.1,0,0,0,128,16Z\" stroke=\"rgba(0, 0, 0, 0.25)\" stroke-width=\"16\"/>\n        </svg>\n      </div>`,\n      iconSize: [32, 48],\n      iconAnchor: [16, 48],\n      popupAnchor: [0, -24]\n    });\n  };\n  const createPopupContent = (markerData, isNewMarker = false) => {\n    const uniqueId = Math.random().toString(36).substring(7);\n    const formId = `marker-form-${uniqueId}`;\n    const deleteId = `delete-btn-${uniqueId}`;\n    const submitId = `submit-btn-${uniqueId}`;\n\n    // Create popup content with unique IDs\n    const content = `\n      <div class=\"marker-content\">\n        <form id=\"${formId}\" class=\"marker-form\">\n          <input \n            type=\"text\" \n            name=\"label\" \n            value=\"${markerData.label || ''}\" \n            placeholder=\"Marker Label\" \n            class=\"marker-input\" \n            required\n          />\n          <textarea \n            name=\"description\" \n            placeholder=\"Description (optional)\" \n            class=\"marker-input\" \n            rows=\"2\"\n          >${markerData.description || ''}</textarea>\n          <select name=\"color\" class=\"marker-input\">\n            ${Object.entries(MARKER_COLORS).map(([value, label]) => `\n              <option value=\"${value}\" ${value === (markerData.color || '#FF0000') ? 'selected' : ''}>\n                ${label}\n              </option>\n            `).join('')}\n          </select>\n          <div class=\"marker-actions\">\n            <button type=\"button\" id=\"${deleteId}\" class=\"delete-button\">\n              ${isNewMarker ? 'Cancel' : 'Delete'}\n            </button>\n            <button type=\"button\" id=\"${submitId}\" class=\"dnd-button\">\n              ${isNewMarker ? 'Add Marker' : 'Save Changes'}\n            </button>\n          </div>\n        </form>\n      </div>\n    `;\n    return {\n      content,\n      formId,\n      deleteId,\n      submitId\n    };\n  };\n  const bindMarkerEvents = (marker, markerData, map, popup) => {\n    console.log('Binding events for marker:', markerData);\n\n    // Create fresh popup content with new IDs\n    const {\n      content,\n      formId,\n      deleteId,\n      submitId\n    } = createPopupContent(markerData, false);\n\n    // Update popup content if provided, otherwise create new popup\n    if (popup) {\n      popup.setContent(content);\n    } else {\n      popup = L.popup({\n        className: 'custom-popup',\n        closeButton: true,\n        autoClose: false,\n        closeOnClick: false\n      }).setContent(content);\n      marker.bindPopup(popup);\n    }\n\n    // Add click handler\n    marker.on('click', e => {\n      // Stop the event from bubbling up to the map\n      L.DomEvent.stopPropagation(e);\n\n      // Close other popups first\n      map.eachLayer(layer => {\n        if (layer instanceof L.Marker && layer !== marker) {\n          layer.closePopup();\n        }\n      });\n\n      // Open this marker's popup\n      marker.openPopup();\n\n      // Get form elements immediately\n      const form = document.getElementById(formId);\n      const deleteBtn = document.getElementById(deleteId);\n      const submitBtn = document.getElementById(submitId);\n      console.log('Form elements:', {\n        formId,\n        deleteId,\n        submitId,\n        form,\n        deleteBtn,\n        submitBtn\n      });\n      if (deleteBtn) {\n        deleteBtn.onclick = async () => {\n          try {\n            if (!selectedCampaign) {\n              throw new Error('No campaign selected');\n            }\n            deleteBtn.disabled = true;\n            console.log('Attempting to delete marker:', {\n              markerId: markerData.id,\n              mapId: mapId,\n              campaignId: selectedCampaign.id\n            });\n            const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}?campaign_id=${selectedCampaign.id}`, {\n              method: 'DELETE',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            const responseText = await response.text();\n            console.log('Delete response:', responseText);\n            if (!response.ok) {\n              throw new Error(`Failed to delete marker: ${responseText}`);\n            }\n\n            // First, close the popup\n            marker.closePopup();\n\n            // Then remove the marker from the map\n            map.removeLayer(marker);\n\n            // Finally, update the state\n            setMarkers(currentMarkers => {\n              const updatedMarkers = currentMarkers.filter(m => m.id !== markerData.id);\n              console.log('Markers before deletion:', currentMarkers.length);\n              console.log('Markers after deletion:', updatedMarkers.length);\n              console.log('Deleted marker ID:', markerData.id);\n              return updatedMarkers;\n            });\n\n            // Clean up any event listeners\n            marker.off();\n          } catch (error) {\n            console.error('Error deleting marker:', error);\n            deleteBtn.disabled = false;\n            alert('Failed to delete marker: ' + error.message);\n          }\n        };\n      }\n      if (submitBtn && form) {\n        form.onsubmit = e => e.preventDefault(); // Prevent form submission\n\n        submitBtn.onclick = async () => {\n          try {\n            if (!selectedCampaign) {\n              throw new Error('No campaign selected');\n            }\n            if (!form.checkValidity()) {\n              form.reportValidity();\n              return;\n            }\n            submitBtn.disabled = true;\n            const formData = new FormData(form);\n            const updatedMarker = {\n              id: markerData.id,\n              map_id: Number(mapId),\n              campaign_id: selectedCampaign.id,\n              lat: Number(markerData.lat),\n              lng: Number(markerData.lng),\n              label: formData.get('label') || '',\n              description: formData.get('description') || '',\n              color: formData.get('color') || '#FF0000'\n            };\n            console.log('Updating marker:', updatedMarker);\n            const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}`, {\n              method: 'PUT',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(updatedMarker)\n            });\n            if (!response.ok) {\n              throw new Error('Failed to update marker');\n            }\n            const savedMarker = await response.json();\n            const parsedMarker = {\n              ...savedMarker,\n              id: savedMarker.id,\n              lat: Number(savedMarker.lat),\n              lng: Number(savedMarker.lng),\n              label: formData.get('label') || '',\n              description: formData.get('description') || '',\n              color: formData.get('color') || '#FF0000',\n              campaign_id: selectedCampaign.id,\n              map_id: Number(mapId)\n            };\n\n            // Update state\n            setMarkers(prev => prev.map(m => m.id === parsedMarker.id ? parsedMarker : m));\n\n            // Update marker appearance\n            marker.setIcon(createMarkerIcon(parsedMarker.color));\n\n            // Close the popup\n            marker.closePopup();\n\n            // Remove old event listeners\n            marker.off('click popupopen popupclose');\n\n            // Rebind events with updated data\n            bindMarkerEvents(marker, parsedMarker, map);\n          } catch (error) {\n            console.error('Error updating marker:', error);\n            submitBtn.disabled = false;\n            alert('Failed to update marker: ' + error.message);\n          }\n        };\n      }\n    });\n\n    // Clean up event listeners when popup closes\n    marker.on('popupclose', () => {\n      const form = document.getElementById(formId);\n      const deleteBtn = document.getElementById(deleteId);\n      const submitBtn = document.getElementById(submitId);\n      if (deleteBtn) deleteBtn.onclick = null;\n      if (submitBtn) submitBtn.onclick = null;\n      if (form) form.onsubmit = null;\n    });\n    return popup;\n  };\n  const addMarkersToMap = (markersData, targetMap) => {\n    if (!targetMap || !targetMap.getContainer()) {\n      console.warn('Map not ready for markers');\n      return;\n    }\n\n    // Only clear temporary markers\n    targetMap.eachLayer(layer => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        targetMap.removeLayer(layer);\n      }\n    });\n\n    // Add new markers\n    markersData.forEach(markerData => {\n      if (!markerData || typeof markerData.lat !== 'number' || typeof markerData.lng !== 'number') {\n        console.warn('Invalid marker data:', markerData);\n        return;\n      }\n      try {\n        // Create new marker\n        const marker = L.marker([markerData.lat, markerData.lng], {\n          icon: createMarkerIcon(markerData.color || '#FF0000'),\n          permanent: true\n        });\n\n        // Bind all events\n        bindMarkerEvents(marker, markerData, targetMap);\n\n        // Add to map\n        marker.addTo(targetMap);\n      } catch (error) {\n        console.error('Error adding marker:', markerData, error);\n      }\n    });\n  };\n\n  // Initialize map when data is ready\n  useEffect(() => {\n    if (!mapData || !imageDimensions || !mapContainerRef.current) return;\n    try {\n      console.log('Initializing map with dimensions:', imageDimensions);\n\n      // Clean up any existing map first\n      cleanupMap();\n      const bounds = [[0, 0], [imageDimensions.height, imageDimensions.width]];\n      const map = L.map(mapContainerRef.current, {\n        crs: L.CRS.Simple,\n        maxZoom: 2,\n        minZoom: -2,\n        maxBounds: bounds,\n        zoomControl: true\n      });\n\n      // Store the map instance in the ref\n      leafletMapRef.current = map;\n\n      // Add the image overlay immediately\n      const imageOverlay = L.imageOverlay(`http://localhost:3001/maps/${mapData.path}`, bounds).addTo(map);\n      map.fitBounds(bounds);\n\n      // Add click handler for new markers\n      map.on('click', e => {\n        // Only handle map clicks if we're not clicking a marker or popup\n        const isMarkerClick = e.originalEvent.target.closest('.leaflet-marker-icon');\n        const isPopupClick = e.originalEvent.target.closest('.leaflet-popup');\n        const isMapClick = e.originalEvent.target === map.getContainer() || e.originalEvent.target.classList.contains('leaflet-tile');\n\n        // If clicking on a marker or popup, let the marker's own click handler handle it\n        if (isMarkerClick || isPopupClick) {\n          return;\n        }\n\n        // If clicking on the map, close popups and potentially create a new marker\n        map.eachLayer(layer => {\n          if (layer instanceof L.Marker) {\n            layer.closePopup();\n          }\n        });\n        if (isMapClick) {\n          handleMapClick(e, map);\n        }\n      });\n\n      // Handle ESC key to close popups\n      const handleEscKey = e => {\n        if (e.key === 'Escape' && leafletMapRef.current) {\n          leafletMapRef.current.eachLayer(layer => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      };\n\n      // Add ESC key listener\n      document.addEventListener('keydown', handleEscKey);\n\n      // Add existing markers if any\n      if (markers.length > 0) {\n        console.log('Adding existing markers:', markers.length);\n        addMarkersToMap(markers, map);\n      }\n      setIsLoading(false);\n\n      // Cleanup function\n      return () => {\n        document.removeEventListener('keydown', handleEscKey);\n        cleanupMap();\n      };\n    } catch (error) {\n      console.error('Error initializing map:', error);\n      setIsLoading(false);\n    }\n  }, [mapData, imageDimensions]); // Remove markers dependency\n\n  // Add separate effect for marker updates\n  useEffect(() => {\n    if (leafletMapRef.current && markers.length > 0) {\n      console.log('Updating markers on map');\n      addMarkersToMap(markers, leafletMapRef.current);\n    }\n  }, [markers]);\n\n  // Modify handleMapClick to close any open popups before creating a new one\n  const handleMapClick = (e, map) => {\n    if (!selectedCampaign || !mapId || !map) {\n      console.error('No campaign selected or invalid map');\n      alert('Please select a campaign first');\n      return;\n    }\n    console.log('Creating temporary marker');\n    const {\n      lat,\n      lng\n    } = e.latlng;\n\n    // Remove any existing temporary markers\n    map.eachLayer(layer => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        map.removeLayer(layer);\n      }\n    });\n    const tempMarker = L.marker([lat, lng], {\n      icon: createMarkerIcon('#FF0000'),\n      permanent: false\n    });\n    const tempMarkerData = {\n      map_id: Number(mapId),\n      lat: Number(lat),\n      lng: Number(lng),\n      label: '',\n      description: '',\n      color: '#FF0000',\n      campaign_id: selectedCampaign.id\n    };\n\n    // Create popup with unique IDs\n    const {\n      content,\n      formId,\n      deleteId,\n      submitId\n    } = createPopupContent(tempMarkerData, true);\n    console.log('Created popup with IDs:', {\n      formId,\n      deleteId,\n      submitId\n    });\n    const popup = L.popup({\n      className: 'custom-popup',\n      closeButton: true,\n      autoClose: false,\n      closeOnClick: false\n    }).setContent(content);\n\n    // Bind popup to marker\n    tempMarker.bindPopup(popup);\n\n    // Add to map and open popup\n    tempMarker.addTo(map);\n    tempMarker.openPopup();\n\n    // Now bind the event handlers immediately\n    console.log('Binding event handlers for temporary marker');\n    const form = document.getElementById(formId);\n    const cancelBtn = document.getElementById(deleteId);\n    const createBtn = document.getElementById(submitId);\n    console.log('Found form elements:', {\n      form: !!form,\n      cancelBtn: !!cancelBtn,\n      createBtn: !!createBtn,\n      formId,\n      deleteId,\n      submitId\n    });\n    if (cancelBtn) {\n      console.log('Adding cancel button handler');\n      cancelBtn.onclick = () => {\n        console.log('Cancel button clicked');\n        map.removeLayer(tempMarker);\n      };\n    }\n    if (createBtn && form) {\n      console.log('Adding create button handler');\n      createBtn.onclick = async () => {\n        console.log('Create button clicked');\n        try {\n          if (!selectedCampaign) {\n            throw new Error('No campaign selected');\n          }\n          if (!form.checkValidity()) {\n            form.reportValidity();\n            return;\n          }\n          createBtn.disabled = true;\n          console.log('Starting marker creation...');\n          const formData = new FormData(form);\n          const newMarker = {\n            map_id: Number(mapId),\n            campaign_id: selectedCampaign.id,\n            lat: Number(lat),\n            lng: Number(lng),\n            label: formData.get('label') || '',\n            description: formData.get('description') || '',\n            color: formData.get('color') || '#FF0000'\n          };\n          console.log('Sending marker data to server:', newMarker);\n          const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newMarker)\n          });\n          const responseText = await response.text();\n          console.log('Server response:', responseText);\n          if (!response.ok) {\n            throw new Error(`Failed to create marker: ${responseText}`);\n          }\n          const savedMarker = JSON.parse(responseText);\n          console.log('Successfully created marker:', savedMarker);\n\n          // Get the marker ID from the response or generate a temporary one\n          const markerId = savedMarker.id || `temp_${Date.now()}`;\n\n          // Remove temp marker first\n          map.removeLayer(tempMarker);\n\n          // Create the permanent marker data with all necessary fields\n          const permanentMarkerData = {\n            ...savedMarker,\n            id: markerId,\n            map_id: Number(mapId),\n            campaign_id: selectedCampaign.id,\n            lat: Number(lat),\n            lng: Number(lng),\n            label: formData.get('label') || '',\n            description: formData.get('description') || '',\n            color: formData.get('color') || '#FF0000'\n          };\n          console.log('Creating permanent marker with data:', permanentMarkerData);\n\n          // Create the permanent marker\n          const permanentMarker = L.marker([lat, lng], {\n            icon: createMarkerIcon(formData.get('color') || '#FF0000'),\n            permanent: true\n          });\n\n          // Update state first\n          setMarkers(prev => {\n            const newMarkers = [...prev, permanentMarkerData];\n            console.log('Updated markers state:', newMarkers);\n            return newMarkers;\n          });\n\n          // Bind events and add to map\n          bindMarkerEvents(permanentMarker, permanentMarkerData, map);\n          permanentMarker.addTo(map);\n          console.log('Marker creation complete');\n\n          // Fetch markers to ensure we have the latest data\n          await fetchMarkers();\n        } catch (error) {\n          console.error('Error creating marker:', error);\n          createBtn.disabled = false;\n          alert('Failed to create marker: ' + error.message);\n        }\n      };\n    }\n\n    // Add event listener for popup close\n    tempMarker.on('popupclose', () => {\n      console.log('Popup closed, cleaning up temporary marker');\n      // Clean up the temporary marker if it's still on the map\n      if (map.hasLayer(tempMarker)) {\n        map.removeLayer(tempMarker);\n      }\n    });\n  };\n  const handleMarkerCreate = () => {};\n  const handleMarkerUpdate = () => {};\n  const handleMarkerDelete = () => {};\n  const handleMarkerEdit = () => {};\n  if (isLoading || !mapData || !imageDimensions) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100%'\n        },\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 699,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'center',\n        padding: '0 16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          margin: 0,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: mapData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        \"aria-label\": \"more\",\n        \"aria-controls\": \"map-menu\",\n        \"aria-haspopup\": \"true\",\n        onClick: e => setMenuAnchorEl(e.currentTarget),\n        style: {\n          marginLeft: '8px',\n          color: '#111827'\n        },\n        children: /*#__PURE__*/_jsxDEV(DotsThreeVertical, {\n          size: 24\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 711,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 709,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"map-menu\",\n      anchorEl: menuAnchorEl,\n      keepMounted: true,\n      open: Boolean(menuAnchorEl),\n      onClose: () => setMenuAnchorEl(null),\n      children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setMenuAnchorEl(null),\n        children: \"Rename\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n        onClick: () => setMenuAnchorEl(null),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 722,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainerRef,\n      style: {\n        height: 'calc(100vh - 80px)',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 708,\n    columnNumber: 5\n  }, this);\n};\n_s(Maps, \"8Rjkta4JrCCodGHDyHv+LrxJeAE=\", false, function () {\n  return [useParams, useNavigate, useCampaign];\n});\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","L","useCampaign","IconButton","Menu","MenuItem","DotsThreeVertical","jsxDEV","_jsxDEV","MARKER_COLORS","Maps","onMapChange","_s","id","mapId","navigate","mapData","setMapData","markers","setMarkers","menuAnchorEl","setMenuAnchorEl","imageDimensions","setImageDimensions","isLoading","setIsLoading","selectedCampaign","mapContainerRef","useRef","leafletMapRef","cleanupMap","current","remove","fetchMap","fetchMarkers","response","fetch","ok","Error","data","json","img","Image","onload","console","log","width","height","onerror","error","src","path","responseText","text","JSON","parse","parsedMarkers","map","marker","lat","Number","lng","campaign_id","addMarkersToMap","createMarkerIcon","color","divIcon","className","html","iconSize","iconAnchor","popupAnchor","createPopupContent","markerData","isNewMarker","uniqueId","Math","random","toString","substring","formId","deleteId","submitId","content","label","description","Object","entries","value","join","bindMarkerEvents","popup","setContent","closeButton","autoClose","closeOnClick","bindPopup","on","e","DomEvent","stopPropagation","eachLayer","layer","Marker","closePopup","openPopup","form","document","getElementById","deleteBtn","submitBtn","onclick","disabled","markerId","campaignId","method","headers","removeLayer","currentMarkers","updatedMarkers","filter","m","length","off","alert","message","onsubmit","preventDefault","checkValidity","reportValidity","formData","FormData","updatedMarker","map_id","get","body","stringify","savedMarker","parsedMarker","prev","setIcon","markersData","targetMap","getContainer","warn","options","permanent","forEach","icon","addTo","bounds","crs","CRS","Simple","maxZoom","minZoom","maxBounds","zoomControl","imageOverlay","fitBounds","isMarkerClick","originalEvent","target","closest","isPopupClick","isMapClick","classList","contains","handleMapClick","handleEscKey","key","addEventListener","removeEventListener","latlng","tempMarker","tempMarkerData","cancelBtn","createBtn","newMarker","Date","now","permanentMarkerData","permanentMarker","newMarkers","hasLayer","handleMarkerCreate","handleMarkerUpdate","handleMarkerDelete","handleMarkerEdit","children","style","display","alignItems","justifyContent","fileName","_jsxFileName","lineNumber","columnNumber","padding","margin","name","onClick","currentTarget","marginLeft","size","anchorEl","keepMounted","open","Boolean","onClose","ref","_c","$RefreshReg$"],"sources":["/Users/josh.thorn/AutoML Co-Pilot/flying-dog-inn-vtt-frontend/src/components/Maps.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport './Maps.css';\nimport { useCampaign } from '../contexts/CampaignContext';\nimport IconButton from '@mui/material/IconButton';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { DotsThreeVertical } from \"@phosphor-icons/react\";\n\n// Marker configuration\nconst MARKER_COLORS = {\n  '#FF0000': 'Red',\n  '#00FF00': 'Green',\n  '#0000FF': 'Blue',\n  '#FFFF00': 'Yellow',\n  '#FF00FF': 'Magenta',\n  '#00FFFF': 'Cyan',\n  '#000000': 'Black'\n};\n\nconst Maps = ({ onMapChange }) => {\n  const { id: mapId } = useParams();\n  const navigate = useNavigate();\n  const [mapData, setMapData] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [menuAnchorEl, setMenuAnchorEl] = useState(null);\n  const [imageDimensions, setImageDimensions] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { selectedCampaign } = useCampaign();\n  const mapContainerRef = React.useRef(null);\n  const leafletMapRef = React.useRef(null);\n\n  // Cleanup function\n  const cleanupMap = () => {\n    if (leafletMapRef.current) {\n      leafletMapRef.current.remove();\n      leafletMapRef.current = null;\n    }\n  };\n\n  // Reset state when map changes\n  useEffect(() => {\n    setIsLoading(true);\n    setMapData(null);\n    setImageDimensions(null);\n    setMarkers([]);\n    cleanupMap();\n    return cleanupMap;\n  }, [mapId]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return cleanupMap;\n  }, []);\n\n  // Fetch map data and markers\n  useEffect(() => {\n    if (selectedCampaign && mapId) {\n      fetchMap();\n      fetchMarkers();\n    }\n  }, [mapId, selectedCampaign]);\n\n  const fetchMap = async () => {\n    if (!selectedCampaign) return;\n    \n    try {\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}?campaign_id=${selectedCampaign.id}`);\n      if (!response.ok) throw new Error('Failed to fetch map');\n      const data = await response.json();\n      setMapData(data);\n      \n      // Load image dimensions\n      const img = new Image();\n      img.onload = () => {\n        console.log('Image loaded:', img.width, img.height);\n        setImageDimensions({ width: img.width, height: img.height });\n        setIsLoading(false);\n      };\n      img.onerror = (error) => {\n        console.error('Failed to load map image:', error);\n        setIsLoading(false);\n      };\n      img.src = `http://localhost:3001/maps/${data.path}`;\n      \n      if (onMapChange) onMapChange(data);\n    } catch (error) {\n      console.error('Error fetching map:', error);\n      setIsLoading(false);\n      navigate('/maps');\n    }\n  };\n\n  const fetchMarkers = async () => {\n    if (!selectedCampaign || !mapId) return;\n    \n    try {\n      console.log('Fetching markers for campaign:', selectedCampaign.id, 'map:', mapId);\n      const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers?campaign_id=${selectedCampaign.id}`);\n      \n      const responseText = await response.text();\n      console.log('Fetch markers response:', responseText);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch markers: ${responseText}`);\n      }\n      \n      const data = JSON.parse(responseText);\n      console.log('Parsed markers:', data);\n      \n      // Convert lat/lng to numbers\n      const parsedMarkers = data.map(marker => ({\n        ...marker,\n        lat: Number(marker.lat),\n        lng: Number(marker.lng),\n        campaign_id: selectedCampaign.id // Ensure campaign_id is set\n      }));\n      \n      console.log('Processed markers:', parsedMarkers);\n      setMarkers(parsedMarkers);\n      \n      // If map is already initialized, add markers\n      if (leafletMapRef.current) {\n        addMarkersToMap(parsedMarkers, leafletMapRef.current);\n      }\n    } catch (error) {\n      console.error('Error fetching markers:', error);\n    }\n  };\n\n  const createMarkerIcon = (color = '#FF0000') => {\n    return L.divIcon({\n      className: 'custom-marker',\n      html: `<div class=\"marker-icon\" style=\"color: ${color}\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"48\" viewBox=\"0 0 256 256\">\n          <path fill=\"currentColor\" d=\"M128,16a88.1,88.1,0,0,0-88,88c0,75.3,80,132.17,83.41,134.55a8,8,0,0,0,9.18,0C136,236.17,216,179.3,216,104A88.1,88.1,0,0,0,128,16Z\" stroke=\"rgba(0, 0, 0, 0.25)\" stroke-width=\"16\"/>\n        </svg>\n      </div>`,\n      iconSize: [32, 48],\n      iconAnchor: [16, 48],\n      popupAnchor: [0, -24]\n    });\n  };\n\n  const createPopupContent = (markerData, isNewMarker = false) => {\n    const uniqueId = Math.random().toString(36).substring(7);\n    const formId = `marker-form-${uniqueId}`;\n    const deleteId = `delete-btn-${uniqueId}`;\n    const submitId = `submit-btn-${uniqueId}`;\n\n    // Create popup content with unique IDs\n    const content = `\n      <div class=\"marker-content\">\n        <form id=\"${formId}\" class=\"marker-form\">\n          <input \n            type=\"text\" \n            name=\"label\" \n            value=\"${markerData.label || ''}\" \n            placeholder=\"Marker Label\" \n            class=\"marker-input\" \n            required\n          />\n          <textarea \n            name=\"description\" \n            placeholder=\"Description (optional)\" \n            class=\"marker-input\" \n            rows=\"2\"\n          >${markerData.description || ''}</textarea>\n          <select name=\"color\" class=\"marker-input\">\n            ${Object.entries(MARKER_COLORS).map(([value, label]) => `\n              <option value=\"${value}\" ${value === (markerData.color || '#FF0000') ? 'selected' : ''}>\n                ${label}\n              </option>\n            `).join('')}\n          </select>\n          <div class=\"marker-actions\">\n            <button type=\"button\" id=\"${deleteId}\" class=\"delete-button\">\n              ${isNewMarker ? 'Cancel' : 'Delete'}\n            </button>\n            <button type=\"button\" id=\"${submitId}\" class=\"dnd-button\">\n              ${isNewMarker ? 'Add Marker' : 'Save Changes'}\n            </button>\n          </div>\n        </form>\n      </div>\n    `;\n\n    return { content, formId, deleteId, submitId };\n  };\n\n  const bindMarkerEvents = (marker, markerData, map, popup) => {\n    console.log('Binding events for marker:', markerData);\n    \n    // Create fresh popup content with new IDs\n    const { content, formId, deleteId, submitId } = createPopupContent(markerData, false);\n    \n    // Update popup content if provided, otherwise create new popup\n    if (popup) {\n      popup.setContent(content);\n    } else {\n      popup = L.popup({\n        className: 'custom-popup',\n        closeButton: true,\n        autoClose: false,\n        closeOnClick: false\n      }).setContent(content);\n      marker.bindPopup(popup);\n    }\n\n    // Add click handler\n    marker.on('click', (e) => {\n      // Stop the event from bubbling up to the map\n      L.DomEvent.stopPropagation(e);\n      \n      // Close other popups first\n      map.eachLayer((layer) => {\n        if (layer instanceof L.Marker && layer !== marker) {\n          layer.closePopup();\n        }\n      });\n      \n      // Open this marker's popup\n      marker.openPopup();\n\n      // Get form elements immediately\n      const form = document.getElementById(formId);\n      const deleteBtn = document.getElementById(deleteId);\n      const submitBtn = document.getElementById(submitId);\n\n      console.log('Form elements:', { formId, deleteId, submitId, form, deleteBtn, submitBtn });\n\n      if (deleteBtn) {\n        deleteBtn.onclick = async () => {\n          try {\n            if (!selectedCampaign) {\n              throw new Error('No campaign selected');\n            }\n\n            deleteBtn.disabled = true;\n            \n            console.log('Attempting to delete marker:', {\n              markerId: markerData.id,\n              mapId: mapId,\n              campaignId: selectedCampaign.id\n            });\n\n            const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}?campaign_id=${selectedCampaign.id}`, {\n              method: 'DELETE',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            \n            const responseText = await response.text();\n            console.log('Delete response:', responseText);\n\n            if (!response.ok) {\n              throw new Error(`Failed to delete marker: ${responseText}`);\n            }\n\n            // First, close the popup\n            marker.closePopup();\n\n            // Then remove the marker from the map\n            map.removeLayer(marker);\n\n            // Finally, update the state\n            setMarkers(currentMarkers => {\n              const updatedMarkers = currentMarkers.filter(m => m.id !== markerData.id);\n              console.log('Markers before deletion:', currentMarkers.length);\n              console.log('Markers after deletion:', updatedMarkers.length);\n              console.log('Deleted marker ID:', markerData.id);\n              return updatedMarkers;\n            });\n\n            // Clean up any event listeners\n            marker.off();\n\n          } catch (error) {\n            console.error('Error deleting marker:', error);\n            deleteBtn.disabled = false;\n            alert('Failed to delete marker: ' + error.message);\n          }\n        };\n      }\n\n      if (submitBtn && form) {\n        form.onsubmit = (e) => e.preventDefault(); // Prevent form submission\n        \n        submitBtn.onclick = async () => {\n          try {\n            if (!selectedCampaign) {\n              throw new Error('No campaign selected');\n            }\n\n            if (!form.checkValidity()) {\n              form.reportValidity();\n              return;\n            }\n\n            submitBtn.disabled = true;\n            \n            const formData = new FormData(form);\n            const updatedMarker = {\n              id: markerData.id,\n              map_id: Number(mapId),\n              campaign_id: selectedCampaign.id,\n              lat: Number(markerData.lat),\n              lng: Number(markerData.lng),\n              label: formData.get('label') || '',\n              description: formData.get('description') || '',\n              color: formData.get('color') || '#FF0000'\n            };\n\n            console.log('Updating marker:', updatedMarker);\n            const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers/${markerData.id}`, {\n              method: 'PUT',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(updatedMarker)\n            });\n\n            if (!response.ok) {\n              throw new Error('Failed to update marker');\n            }\n            \n            const savedMarker = await response.json();\n            \n            const parsedMarker = {\n              ...savedMarker,\n              id: savedMarker.id,\n              lat: Number(savedMarker.lat),\n              lng: Number(savedMarker.lng),\n              label: formData.get('label') || '',\n              description: formData.get('description') || '',\n              color: formData.get('color') || '#FF0000',\n              campaign_id: selectedCampaign.id,\n              map_id: Number(mapId)\n            };\n            \n            // Update state\n            setMarkers(prev => prev.map(m => m.id === parsedMarker.id ? parsedMarker : m));\n            \n            // Update marker appearance\n            marker.setIcon(createMarkerIcon(parsedMarker.color));\n            \n            // Close the popup\n            marker.closePopup();\n\n            // Remove old event listeners\n            marker.off('click popupopen popupclose');\n\n            // Rebind events with updated data\n            bindMarkerEvents(marker, parsedMarker, map);\n\n          } catch (error) {\n            console.error('Error updating marker:', error);\n            submitBtn.disabled = false;\n            alert('Failed to update marker: ' + error.message);\n          }\n        };\n      }\n    });\n\n    // Clean up event listeners when popup closes\n    marker.on('popupclose', () => {\n      const form = document.getElementById(formId);\n      const deleteBtn = document.getElementById(deleteId);\n      const submitBtn = document.getElementById(submitId);\n\n      if (deleteBtn) deleteBtn.onclick = null;\n      if (submitBtn) submitBtn.onclick = null;\n      if (form) form.onsubmit = null;\n    });\n\n    return popup;\n  };\n\n  const addMarkersToMap = (markersData, targetMap) => {\n    if (!targetMap || !targetMap.getContainer()) {\n      console.warn('Map not ready for markers');\n      return;\n    }\n\n    // Only clear temporary markers\n    targetMap.eachLayer((layer) => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        targetMap.removeLayer(layer);\n      }\n    });\n\n    // Add new markers\n    markersData.forEach(markerData => {\n      if (!markerData || typeof markerData.lat !== 'number' || typeof markerData.lng !== 'number') {\n        console.warn('Invalid marker data:', markerData);\n        return;\n      }\n\n      try {\n        // Create new marker\n        const marker = L.marker([markerData.lat, markerData.lng], {\n          icon: createMarkerIcon(markerData.color || '#FF0000'),\n          permanent: true\n        });\n\n        // Bind all events\n        bindMarkerEvents(marker, markerData, targetMap);\n\n        // Add to map\n        marker.addTo(targetMap);\n      } catch (error) {\n        console.error('Error adding marker:', markerData, error);\n      }\n    });\n  };\n\n  // Initialize map when data is ready\n  useEffect(() => {\n    if (!mapData || !imageDimensions || !mapContainerRef.current) return;\n\n    try {\n      console.log('Initializing map with dimensions:', imageDimensions);\n      \n      // Clean up any existing map first\n      cleanupMap();\n\n      const bounds = [[0, 0], [imageDimensions.height, imageDimensions.width]];\n      const map = L.map(mapContainerRef.current, {\n        crs: L.CRS.Simple,\n        maxZoom: 2,\n        minZoom: -2,\n        maxBounds: bounds,\n        zoomControl: true\n      });\n\n      // Store the map instance in the ref\n      leafletMapRef.current = map;\n\n      // Add the image overlay immediately\n      const imageOverlay = L.imageOverlay(`http://localhost:3001/maps/${mapData.path}`, bounds).addTo(map);\n      map.fitBounds(bounds);\n\n      // Add click handler for new markers\n      map.on('click', (e) => {\n        // Only handle map clicks if we're not clicking a marker or popup\n        const isMarkerClick = e.originalEvent.target.closest('.leaflet-marker-icon');\n        const isPopupClick = e.originalEvent.target.closest('.leaflet-popup');\n        const isMapClick = e.originalEvent.target === map.getContainer() || \n                          e.originalEvent.target.classList.contains('leaflet-tile');\n\n        // If clicking on a marker or popup, let the marker's own click handler handle it\n        if (isMarkerClick || isPopupClick) {\n          return;\n        }\n\n        // If clicking on the map, close popups and potentially create a new marker\n        map.eachLayer((layer) => {\n          if (layer instanceof L.Marker) {\n            layer.closePopup();\n          }\n        });\n\n        if (isMapClick) {\n          handleMapClick(e, map);\n        }\n      });\n\n      // Handle ESC key to close popups\n      const handleEscKey = (e) => {\n        if (e.key === 'Escape' && leafletMapRef.current) {\n          leafletMapRef.current.eachLayer((layer) => {\n            if (layer instanceof L.Marker) {\n              layer.closePopup();\n            }\n          });\n        }\n      };\n\n      // Add ESC key listener\n      document.addEventListener('keydown', handleEscKey);\n\n      // Add existing markers if any\n      if (markers.length > 0) {\n        console.log('Adding existing markers:', markers.length);\n        addMarkersToMap(markers, map);\n      }\n\n      setIsLoading(false);\n\n      // Cleanup function\n      return () => {\n        document.removeEventListener('keydown', handleEscKey);\n        cleanupMap();\n      };\n\n    } catch (error) {\n      console.error('Error initializing map:', error);\n      setIsLoading(false);\n    }\n  }, [mapData, imageDimensions]); // Remove markers dependency\n\n  // Add separate effect for marker updates\n  useEffect(() => {\n    if (leafletMapRef.current && markers.length > 0) {\n      console.log('Updating markers on map');\n      addMarkersToMap(markers, leafletMapRef.current);\n    }\n  }, [markers]);\n\n  // Modify handleMapClick to close any open popups before creating a new one\n  const handleMapClick = (e, map) => {\n    if (!selectedCampaign || !mapId || !map) {\n      console.error('No campaign selected or invalid map');\n      alert('Please select a campaign first');\n      return;\n    }\n\n    console.log('Creating temporary marker');\n    const { lat, lng } = e.latlng;\n    \n    // Remove any existing temporary markers\n    map.eachLayer((layer) => {\n      if (layer instanceof L.Marker && !layer.options.permanent) {\n        map.removeLayer(layer);\n      }\n    });\n\n    const tempMarker = L.marker([lat, lng], {\n      icon: createMarkerIcon('#FF0000'),\n      permanent: false\n    });\n\n    const tempMarkerData = {\n      map_id: Number(mapId),\n      lat: Number(lat),\n      lng: Number(lng),\n      label: '',\n      description: '',\n      color: '#FF0000',\n      campaign_id: selectedCampaign.id\n    };\n\n    // Create popup with unique IDs\n    const { content, formId, deleteId, submitId } = createPopupContent(tempMarkerData, true);\n    console.log('Created popup with IDs:', { formId, deleteId, submitId });\n\n    const popup = L.popup({\n      className: 'custom-popup',\n      closeButton: true,\n      autoClose: false,\n      closeOnClick: false\n    }).setContent(content);\n\n    // Bind popup to marker\n    tempMarker.bindPopup(popup);\n\n    // Add to map and open popup\n    tempMarker.addTo(map);\n    tempMarker.openPopup();\n\n    // Now bind the event handlers immediately\n    console.log('Binding event handlers for temporary marker');\n    const form = document.getElementById(formId);\n    const cancelBtn = document.getElementById(deleteId);\n    const createBtn = document.getElementById(submitId);\n\n    console.log('Found form elements:', {\n      form: !!form,\n      cancelBtn: !!cancelBtn,\n      createBtn: !!createBtn,\n      formId,\n      deleteId,\n      submitId\n    });\n\n    if (cancelBtn) {\n      console.log('Adding cancel button handler');\n      cancelBtn.onclick = () => {\n        console.log('Cancel button clicked');\n        map.removeLayer(tempMarker);\n      };\n    }\n\n    if (createBtn && form) {\n      console.log('Adding create button handler');\n      createBtn.onclick = async () => {\n        console.log('Create button clicked');\n        try {\n          if (!selectedCampaign) {\n            throw new Error('No campaign selected');\n          }\n\n          if (!form.checkValidity()) {\n            form.reportValidity();\n            return;\n          }\n\n          createBtn.disabled = true;\n          console.log('Starting marker creation...');\n\n          const formData = new FormData(form);\n          const newMarker = {\n            map_id: Number(mapId),\n            campaign_id: selectedCampaign.id,\n            lat: Number(lat),\n            lng: Number(lng),\n            label: formData.get('label') || '',\n            description: formData.get('description') || '',\n            color: formData.get('color') || '#FF0000'\n          };\n\n          console.log('Sending marker data to server:', newMarker);\n\n          const response = await fetch(`http://localhost:3001/api/maps/${mapId}/markers`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(newMarker)\n          });\n\n          const responseText = await response.text();\n          console.log('Server response:', responseText);\n\n          if (!response.ok) {\n            throw new Error(`Failed to create marker: ${responseText}`);\n          }\n\n          const savedMarker = JSON.parse(responseText);\n          console.log('Successfully created marker:', savedMarker);\n\n          // Get the marker ID from the response or generate a temporary one\n          const markerId = savedMarker.id || `temp_${Date.now()}`;\n\n          // Remove temp marker first\n          map.removeLayer(tempMarker);\n\n          // Create the permanent marker data with all necessary fields\n          const permanentMarkerData = {\n            ...savedMarker,\n            id: markerId,\n            map_id: Number(mapId),\n            campaign_id: selectedCampaign.id,\n            lat: Number(lat),\n            lng: Number(lng),\n            label: formData.get('label') || '',\n            description: formData.get('description') || '',\n            color: formData.get('color') || '#FF0000'\n          };\n\n          console.log('Creating permanent marker with data:', permanentMarkerData);\n\n          // Create the permanent marker\n          const permanentMarker = L.marker([lat, lng], {\n            icon: createMarkerIcon(formData.get('color') || '#FF0000'),\n            permanent: true\n          });\n\n          // Update state first\n          setMarkers(prev => {\n            const newMarkers = [...prev, permanentMarkerData];\n            console.log('Updated markers state:', newMarkers);\n            return newMarkers;\n          });\n\n          // Bind events and add to map\n          bindMarkerEvents(permanentMarker, permanentMarkerData, map);\n          permanentMarker.addTo(map);\n\n          console.log('Marker creation complete');\n\n          // Fetch markers to ensure we have the latest data\n          await fetchMarkers();\n\n        } catch (error) {\n          console.error('Error creating marker:', error);\n          createBtn.disabled = false;\n          alert('Failed to create marker: ' + error.message);\n        }\n      };\n    }\n\n    // Add event listener for popup close\n    tempMarker.on('popupclose', () => {\n      console.log('Popup closed, cleaning up temporary marker');\n      // Clean up the temporary marker if it's still on the map\n      if (map.hasLayer(tempMarker)) {\n        map.removeLayer(tempMarker);\n      }\n    });\n  };\n\n  const handleMarkerCreate = () => {};\n  const handleMarkerUpdate = () => {};\n  const handleMarkerDelete = () => {};\n  const handleMarkerEdit = () => {};\n\n  if (isLoading || !mapData || !imageDimensions) {\n    return (\n      <div className=\"map-container\">\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: '100%' }}>\n          Loading map...\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"map-container\">\n      <div style={{ display: 'flex', alignItems: 'center', padding: '0 16px' }}>\n        <h2 style={{ margin: 0, display: 'flex', alignItems: 'center' }}>{mapData.name}</h2>\n        <IconButton\n          aria-label=\"more\"\n          aria-controls=\"map-menu\"\n          aria-haspopup=\"true\"\n          onClick={(e) => setMenuAnchorEl(e.currentTarget)}\n          style={{ marginLeft: '8px', color: '#111827' }}\n        >\n          <DotsThreeVertical size={24} />\n        </IconButton>\n      </div>\n\n      <Menu\n        id=\"map-menu\"\n        anchorEl={menuAnchorEl}\n        keepMounted\n        open={Boolean(menuAnchorEl)}\n        onClose={() => setMenuAnchorEl(null)}\n      >\n        <MenuItem onClick={() => setMenuAnchorEl(null)}>Rename</MenuItem>\n        <MenuItem onClick={() => setMenuAnchorEl(null)}>Delete</MenuItem>\n      </Menu>\n\n      <div ref={mapContainerRef} style={{ height: 'calc(100vh - 80px)', width: '100%' }} />\n    </div>\n  );\n};\n\nexport default Maps;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}